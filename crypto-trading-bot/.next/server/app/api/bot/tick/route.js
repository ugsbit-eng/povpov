/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/bot/tick/route";
exports.ids = ["app/api/bot/tick/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbot%2Ftick%2Froute&page=%2Fapi%2Fbot%2Ftick%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbot%2Ftick%2Froute.ts&appDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbot%2Ftick%2Froute&page=%2Fapi%2Fbot%2Ftick%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbot%2Ftick%2Froute.ts&appDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handler: () => (/* binding */ handler),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/server/request-meta */ \"(rsc)/./node_modules/next/dist/server/request-meta.js\");\n/* harmony import */ var next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(rsc)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/shared/lib/router/utils/app-paths */ \"next/dist/shared/lib/router/utils/app-paths\");\n/* harmony import */ var next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/base-http/node */ \"(rsc)/./node_modules/next/dist/server/base-http/node.js\");\n/* harmony import */ var next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! next/dist/server/web/spec-extension/adapters/next-request */ \"(rsc)/./node_modules/next/dist/server/web/spec-extension/adapters/next-request.js\");\n/* harmony import */ var next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(rsc)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! next/dist/server/instrumentation/utils */ \"(rsc)/./node_modules/next/dist/server/instrumentation/utils.js\");\n/* harmony import */ var next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! next/dist/server/send-response */ \"(rsc)/./node_modules/next/dist/server/send-response.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! next/dist/server/web/utils */ \"(rsc)/./node_modules/next/dist/server/web/utils.js\");\n/* harmony import */ var next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! next/dist/server/lib/cache-control */ \"(rsc)/./node_modules/next/dist/server/lib/cache-control.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! next/dist/lib/constants */ \"(rsc)/./node_modules/next/dist/lib/constants.js\");\n/* harmony import */ var next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! next/dist/shared/lib/no-fallback-error.external */ \"next/dist/shared/lib/no-fallback-error.external\");\n/* harmony import */ var next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! next/dist/server/response-cache */ \"(rsc)/./node_modules/next/dist/server/response-cache/index.js\");\n/* harmony import */ var next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var C_Users_JP_ppppppppppppppppp_pov_crypto_trading_bot_src_app_api_bot_tick_route_ts__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./src/app/api/bot/tick/route.ts */ \"(rsc)/./src/app/api/bot/tick/route.ts\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/bot/tick/route\",\n        pathname: \"/api/bot/tick\",\n        filename: \"route\",\n        bundlePath: \"app/api/bot/tick/route\"\n    },\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || '',\n    resolvedPagePath: \"C:\\\\Users\\\\JP\\\\ppppppppppppppppp\\\\pov\\\\crypto-trading-bot\\\\src\\\\app\\\\api\\\\bot\\\\tick\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_JP_ppppppppppppppppp_pov_crypto_trading_bot_src_app_api_bot_tick_route_ts__WEBPACK_IMPORTED_MODULE_16__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\nasync function handler(req, res, ctx) {\n    var _nextConfig_experimental;\n    let srcPage = \"/api/bot/tick/route\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {} else if (srcPage === '/index') {\n        // we always normalize /index specifically\n        srcPage = '/';\n    }\n    const multiZoneDraftMode = false;\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage,\n        multiZoneDraftMode\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return null;\n    }\n    const { buildId, params, nextConfig, isDraftMode, prerenderManifest, routerServerContext, isOnDemandRevalidate, revalidateOnlyGenerated, resolvedPathname } = prepareResult;\n    const normalizedSrcPage = (0,next_dist_shared_lib_router_utils_app_paths__WEBPACK_IMPORTED_MODULE_5__.normalizeAppPath)(srcPage);\n    let isIsr = Boolean(prerenderManifest.dynamicRoutes[normalizedSrcPage] || prerenderManifest.routes[resolvedPathname]);\n    if (isIsr && !isDraftMode) {\n        const isPrerendered = Boolean(prerenderManifest.routes[resolvedPathname]);\n        const prerenderInfo = prerenderManifest.dynamicRoutes[normalizedSrcPage];\n        if (prerenderInfo) {\n            if (prerenderInfo.fallback === false && !isPrerendered) {\n                throw new next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError();\n            }\n        }\n    }\n    let cacheKey = null;\n    if (isIsr && !routeModule.isDev && !isDraftMode) {\n        cacheKey = resolvedPathname;\n        // ensure /index and / is normalized to one key\n        cacheKey = cacheKey === '/index' ? '/' : cacheKey;\n    }\n    const supportsDynamicResponse = // If we're in development, we always support dynamic HTML\n    routeModule.isDev === true || // If this is not SSG or does not have static paths, then it supports\n    // dynamic HTML.\n    !isIsr;\n    // This is a revalidation request if the request is for a static\n    // page and it is not being resumed from a postponed render and\n    // it is not a dynamic RSC request then it is a revalidation\n    // request.\n    const isRevalidate = isIsr && !supportsDynamicResponse;\n    const method = req.method || 'GET';\n    const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.getTracer)();\n    const activeSpan = tracer.getActiveScopeSpan();\n    const context = {\n        params,\n        prerenderManifest,\n        renderOpts: {\n            experimental: {\n                cacheComponents: Boolean(nextConfig.experimental.cacheComponents),\n                authInterrupts: Boolean(nextConfig.experimental.authInterrupts)\n            },\n            supportsDynamicResponse,\n            incrementalCache: (0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'incrementalCache'),\n            cacheLifeProfiles: (_nextConfig_experimental = nextConfig.experimental) == null ? void 0 : _nextConfig_experimental.cacheLife,\n            isRevalidate,\n            waitUntil: ctx.waitUntil,\n            onClose: (cb)=>{\n                res.on('close', cb);\n            },\n            onAfterTaskError: undefined,\n            onInstrumentationRequestError: (error, _request, errorContext)=>routeModule.onRequestError(req, error, errorContext, routerServerContext)\n        },\n        sharedContext: {\n            buildId\n        }\n    };\n    const nodeNextReq = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextRequest(req);\n    const nodeNextRes = new next_dist_server_base_http_node__WEBPACK_IMPORTED_MODULE_6__.NodeNextResponse(res);\n    const nextReq = next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.NextRequestAdapter.fromNodeNextRequest(nodeNextReq, (0,next_dist_server_web_spec_extension_adapters_next_request__WEBPACK_IMPORTED_MODULE_7__.signalFromNodeResponse)(res));\n    try {\n        const invokeRouteModule = async (span)=>{\n            return routeModule.handle(nextReq, context).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        };\n        const handleResponse = async (currentSpan)=>{\n            var _cacheEntry_value;\n            const responseGenerator = async ({ previousCacheEntry })=>{\n                try {\n                    if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isOnDemandRevalidate && revalidateOnlyGenerated && !previousCacheEntry) {\n                        res.statusCode = 404;\n                        // on-demand revalidate always sets this header\n                        res.setHeader('x-nextjs-cache', 'REVALIDATED');\n                        res.end('This page could not be found');\n                        return null;\n                    }\n                    const response = await invokeRouteModule(currentSpan);\n                    req.fetchMetrics = context.renderOpts.fetchMetrics;\n                    let pendingWaitUntil = context.renderOpts.pendingWaitUntil;\n                    // Attempt using provided waitUntil if available\n                    // if it's not we fallback to sendResponse's handling\n                    if (pendingWaitUntil) {\n                        if (ctx.waitUntil) {\n                            ctx.waitUntil(pendingWaitUntil);\n                            pendingWaitUntil = undefined;\n                        }\n                    }\n                    const cacheTags = context.renderOpts.collectedTags;\n                    // If the request is for a static response, we can cache it so long\n                    // as it's not edge.\n                    if (isIsr) {\n                        const blob = await response.blob();\n                        // Copy the headers from the response.\n                        const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.toNodeOutgoingHttpHeaders)(response.headers);\n                        if (cacheTags) {\n                            headers[next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER] = cacheTags;\n                        }\n                        if (!headers['content-type'] && blob.type) {\n                            headers['content-type'] = blob.type;\n                        }\n                        const revalidate = typeof context.renderOpts.collectedRevalidate === 'undefined' || context.renderOpts.collectedRevalidate >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? false : context.renderOpts.collectedRevalidate;\n                        const expire = typeof context.renderOpts.collectedExpire === 'undefined' || context.renderOpts.collectedExpire >= next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.INFINITE_CACHE ? undefined : context.renderOpts.collectedExpire;\n                        // Create the cache entry for the response.\n                        const cacheEntry = {\n                            value: {\n                                kind: next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE,\n                                status: response.status,\n                                body: Buffer.from(await blob.arrayBuffer()),\n                                headers\n                            },\n                            cacheControl: {\n                                revalidate,\n                                expire\n                            }\n                        };\n                        return cacheEntry;\n                    } else {\n                        // send response without caching if not ISR\n                        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, response, context.renderOpts.pendingWaitUntil);\n                        return null;\n                    }\n                } catch (err) {\n                    // if this is a background revalidate we need to report\n                    // the request error here as it won't be bubbled\n                    if (previousCacheEntry == null ? void 0 : previousCacheEntry.isStale) {\n                        await routeModule.onRequestError(req, err, {\n                            routerKind: 'App Router',\n                            routePath: srcPage,\n                            routeType: 'route',\n                            revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                                isRevalidate,\n                                isOnDemandRevalidate\n                            })\n                        }, routerServerContext);\n                    }\n                    throw err;\n                }\n            };\n            const cacheEntry = await routeModule.handleResponse({\n                req,\n                nextConfig,\n                cacheKey,\n                routeKind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n                isFallback: false,\n                prerenderManifest,\n                isRoutePPREnabled: false,\n                isOnDemandRevalidate,\n                revalidateOnlyGenerated,\n                responseGenerator,\n                waitUntil: ctx.waitUntil\n            });\n            // we don't create a cacheEntry for ISR\n            if (!isIsr) {\n                return null;\n            }\n            if ((cacheEntry == null ? void 0 : (_cacheEntry_value = cacheEntry.value) == null ? void 0 : _cacheEntry_value.kind) !== next_dist_server_response_cache__WEBPACK_IMPORTED_MODULE_15__.CachedRouteKind.APP_ROUTE) {\n                var _cacheEntry_value1;\n                throw Object.defineProperty(new Error(`Invariant: app-route received invalid cache entry ${cacheEntry == null ? void 0 : (_cacheEntry_value1 = cacheEntry.value) == null ? void 0 : _cacheEntry_value1.kind}`), \"__NEXT_ERROR_CODE\", {\n                    value: \"E701\",\n                    enumerable: false,\n                    configurable: true\n                });\n            }\n            if (!(0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode')) {\n                res.setHeader('x-nextjs-cache', isOnDemandRevalidate ? 'REVALIDATED' : cacheEntry.isMiss ? 'MISS' : cacheEntry.isStale ? 'STALE' : 'HIT');\n            }\n            // Draft mode should never be cached\n            if (isDraftMode) {\n                res.setHeader('Cache-Control', 'private, no-cache, no-store, max-age=0, must-revalidate');\n            }\n            const headers = (0,next_dist_server_web_utils__WEBPACK_IMPORTED_MODULE_11__.fromNodeOutgoingHttpHeaders)(cacheEntry.value.headers);\n            if (!((0,next_dist_server_request_meta__WEBPACK_IMPORTED_MODULE_3__.getRequestMeta)(req, 'minimalMode') && isIsr)) {\n                headers.delete(next_dist_lib_constants__WEBPACK_IMPORTED_MODULE_13__.NEXT_CACHE_TAGS_HEADER);\n            }\n            // If cache control is already set on the response we don't\n            // override it to allow users to customize it via next.config\n            if (cacheEntry.cacheControl && !res.getHeader('Cache-Control') && !headers.get('Cache-Control')) {\n                headers.set('Cache-Control', (0,next_dist_server_lib_cache_control__WEBPACK_IMPORTED_MODULE_12__.getCacheControlHeader)(cacheEntry.cacheControl));\n            }\n            await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(cacheEntry.value.body, {\n                headers,\n                status: cacheEntry.value.status || 200\n            }));\n            return null;\n        };\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await handleResponse(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_8__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_4__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, handleResponse));\n        }\n    } catch (err) {\n        if (!(err instanceof next_dist_shared_lib_no_fallback_error_external__WEBPACK_IMPORTED_MODULE_14__.NoFallbackError)) {\n            await routeModule.onRequestError(req, err, {\n                routerKind: 'App Router',\n                routePath: normalizedSrcPage,\n                routeType: 'route',\n                revalidateReason: (0,next_dist_server_instrumentation_utils__WEBPACK_IMPORTED_MODULE_9__.getRevalidateReason)({\n                    isRevalidate,\n                    isOnDemandRevalidate\n                })\n            });\n        }\n        // rethrow so that we can handle serving error page\n        // If this is during static generation, throw the error again.\n        if (isIsr) throw err;\n        // Otherwise, send a 500 response.\n        await (0,next_dist_server_send_response__WEBPACK_IMPORTED_MODULE_10__.sendResponse)(nodeNextReq, nodeNextRes, new Response(null, {\n            status: 500\n        }));\n        return null;\n    }\n}\n\n//# sourceMappingURL=app-route.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbot%2Ftick%2Froute&page=%2Fapi%2Fbot%2Ftick%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbot%2Ftick%2Froute.ts&appDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/bot/tick/route.ts":
/*!***************************************!*\
  !*** ./src/app/api/bot/tick/route.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_backgroundWorker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/backgroundWorker */ \"(rsc)/./src/lib/backgroundWorker.ts\");\n\n\nasync function POST(request) {\n    try {\n        // Asynchronously process the bot tick without awaiting the result\n        (0,_lib_backgroundWorker__WEBPACK_IMPORTED_MODULE_1__.processBotTick)().catch(console.error);\n        // Immediately return a success response\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: 'Bot tick processing started',\n            timestamp: new Date().toISOString()\n        });\n    } catch (error) {\n        console.error('Bot tick error:', error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: false,\n            error: error instanceof Error ? error.message : 'Failed to process tick'\n        }, {\n            status: 500\n        });\n    }\n}\n// Allow GET as well for easy polling\nasync function GET(request) {\n    return POST(request);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9ib3QvdGljay9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQXdEO0FBQ0E7QUFFakQsZUFBZUUsS0FBS0MsT0FBb0I7SUFDN0MsSUFBSTtRQUNGLGtFQUFrRTtRQUNsRUYscUVBQWNBLEdBQUdHLEtBQUssQ0FBQ0MsUUFBUUMsS0FBSztRQUVwQyx3Q0FBd0M7UUFDeEMsT0FBT04scURBQVlBLENBQUNPLElBQUksQ0FBQztZQUN2QkMsU0FBUztZQUNUQyxTQUFTO1lBQ1RDLFdBQVcsSUFBSUMsT0FBT0MsV0FBVztRQUNuQztJQUNGLEVBQUUsT0FBT04sT0FBTztRQUNkRCxRQUFRQyxLQUFLLENBQUMsbUJBQW1CQTtRQUNqQyxPQUFPTixxREFBWUEsQ0FBQ08sSUFBSSxDQUN0QjtZQUNFQyxTQUFTO1lBQ1RGLE9BQU9BLGlCQUFpQk8sUUFBUVAsTUFBTUcsT0FBTyxHQUFHO1FBQ2xELEdBQ0E7WUFBRUssUUFBUTtRQUFJO0lBRWxCO0FBQ0Y7QUFFQSxxQ0FBcUM7QUFDOUIsZUFBZUMsSUFBSVosT0FBb0I7SUFDNUMsT0FBT0QsS0FBS0M7QUFDZCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKUFxccHBwcHBwcHBwcHBwcHBwcHBcXHBvdlxcY3J5cHRvLXRyYWRpbmctYm90XFxzcmNcXGFwcFxcYXBpXFxib3RcXHRpY2tcXHJvdXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBwcm9jZXNzQm90VGljayB9IGZyb20gJ0AvbGliL2JhY2tncm91bmRXb3JrZXInO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIC8vIEFzeW5jaHJvbm91c2x5IHByb2Nlc3MgdGhlIGJvdCB0aWNrIHdpdGhvdXQgYXdhaXRpbmcgdGhlIHJlc3VsdFxuICAgIHByb2Nlc3NCb3RUaWNrKCkuY2F0Y2goY29uc29sZS5lcnJvcik7XG4gICAgXG4gICAgLy8gSW1tZWRpYXRlbHkgcmV0dXJuIGEgc3VjY2VzcyByZXNwb25zZVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ0JvdCB0aWNrIHByb2Nlc3Npbmcgc3RhcnRlZCcsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdCb3QgdGljayBlcnJvcjonLCBlcnJvcik7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0ZhaWxlZCB0byBwcm9jZXNzIHRpY2snLFxuICAgICAgfSxcbiAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICk7XG4gIH1cbn1cblxuLy8gQWxsb3cgR0VUIGFzIHdlbGwgZm9yIGVhc3kgcG9sbGluZ1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICByZXR1cm4gUE9TVChyZXF1ZXN0KTtcbn1cblxuXG5cblxuXG5cbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJwcm9jZXNzQm90VGljayIsIlBPU1QiLCJyZXF1ZXN0IiwiY2F0Y2giLCJjb25zb2xlIiwiZXJyb3IiLCJqc29uIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJFcnJvciIsInN0YXR1cyIsIkdFVCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/bot/tick/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/constants/config.ts":
/*!*********************************!*\
  !*** ./src/constants/config.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BRAND: () => (/* binding */ BRAND),\n/* harmony export */   DEFAULT_CAPITAL: () => (/* binding */ DEFAULT_CAPITAL),\n/* harmony export */   DEFAULT_MAX_POSITION_SIZE: () => (/* binding */ DEFAULT_MAX_POSITION_SIZE),\n/* harmony export */   DEFAULT_RISK_LEVEL: () => (/* binding */ DEFAULT_RISK_LEVEL),\n/* harmony export */   DEFAULT_STOP_LOSS: () => (/* binding */ DEFAULT_STOP_LOSS),\n/* harmony export */   DEFAULT_TAKE_PROFIT: () => (/* binding */ DEFAULT_TAKE_PROFIT),\n/* harmony export */   MONTHLY_ROI_RANGE: () => (/* binding */ MONTHLY_ROI_RANGE),\n/* harmony export */   POV_STRATEGIES: () => (/* binding */ POV_STRATEGIES),\n/* harmony export */   PRICE_CACHE_DURATION: () => (/* binding */ PRICE_CACHE_DURATION),\n/* harmony export */   SIMULATION_SPEEDS: () => (/* binding */ SIMULATION_SPEEDS),\n/* harmony export */   SLIPPAGE_RANGE: () => (/* binding */ SLIPPAGE_RANGE),\n/* harmony export */   THEME_COLORS: () => (/* binding */ THEME_COLORS),\n/* harmony export */   TICK_INTERVAL: () => (/* binding */ TICK_INTERVAL),\n/* harmony export */   TRADING_PAIRS: () => (/* binding */ TRADING_PAIRS),\n/* harmony export */   WIN_RATE_RANGE: () => (/* binding */ WIN_RATE_RANGE)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types/index.ts\");\n\nconst TRADING_PAIRS = [\n    {\n        value: _types__WEBPACK_IMPORTED_MODULE_0__.TradingPair.SOL_USDC,\n        label: 'SOL/USDC',\n        coinGeckoId: 'solana'\n    },\n    {\n        value: _types__WEBPACK_IMPORTED_MODULE_0__.TradingPair.BTC_USDT,\n        label: 'BTC/USDT',\n        coinGeckoId: 'bitcoin'\n    },\n    {\n        value: _types__WEBPACK_IMPORTED_MODULE_0__.TradingPair.ETH_USDC,\n        label: 'ETH/USDC',\n        coinGeckoId: 'ethereum'\n    }\n];\nconst DEFAULT_CAPITAL = 10000;\nconst DEFAULT_RISK_LEVEL = 50;\nconst DEFAULT_STOP_LOSS = 2; // 2%\nconst DEFAULT_TAKE_PROFIT = 5; // 5%\nconst DEFAULT_MAX_POSITION_SIZE = 20; // 20% of capital\nconst SLIPPAGE_RANGE = {\n    min: 0.001,\n    max: 0.005\n};\nconst WIN_RATE_RANGE = {\n    min: 0.65,\n    max: 0.80\n};\nconst MONTHLY_ROI_RANGE = {\n    min: 0.08,\n    max: 0.25\n};\nconst TICK_INTERVAL = 10000; // 10 seconds\nconst PRICE_CACHE_DURATION = 5000; // 5 seconds\nconst POV_STRATEGIES = [\n    {\n        type: _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.MOMENTUM_SURGE,\n        name: 'Momentum Surge',\n        description: 'Detects rapid price momentum shifts using RSI and volume spike detection',\n        icon: '⚡'\n    },\n    {\n        type: _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.VOLATILITY_HARVEST,\n        name: 'Volatility Harvest',\n        description: 'Exploits market volatility patterns with Bollinger Bands and ATR',\n        icon: '🌊'\n    },\n    {\n        type: _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.TREND_REVERSAL_PRO,\n        name: 'Trend Reversal Pro',\n        description: 'Identifies trend reversals before they happen using MACD and candlestick patterns',\n        icon: '🔄'\n    },\n    {\n        type: _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.SMART_ENTRY_POINTS,\n        name: 'Smart Entry Points',\n        description: 'AI-powered optimal entry/exit timing with multiple indicator confluence',\n        icon: '🎯'\n    },\n    {\n        type: _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.MULTI_TIMEFRAME_SYNC,\n        name: 'Multi-Timeframe Sync',\n        description: 'Combines signals across 1h, 4h, and 1d timeframes for maximum accuracy',\n        icon: '📊'\n    },\n    {\n        type: _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.LIQUIDITY_FLOW,\n        name: 'Liquidity Flow',\n        description: 'Follows whale wallet movements and liquidity patterns',\n        icon: '🐋'\n    }\n];\nconst SIMULATION_SPEEDS = [\n    {\n        value: 1,\n        label: '1x (Real-time)'\n    },\n    {\n        value: 10,\n        label: '10x (Fast)'\n    },\n    {\n        value: 50,\n        label: '50x (Very Fast)'\n    },\n    {\n        value: 100,\n        label: '100x (Ultra Fast)'\n    }\n];\nconst BRAND = {\n    name: 'P.O.V TRADING BOT',\n    team: 'P.O.V',\n    tagline: 'Elite Algorithmic Trading for Crypto',\n    fullTagline: 'Exclusive Proprietary Strategies'\n};\nconst THEME_COLORS = {\n    navy: '#0a0e27',\n    cyan: '#00d9ff',\n    emerald: '#00ff88',\n    violet: '#b000ff',\n    lime: '#00ff00',\n    red: '#ff0055',\n    orange: '#ff9500'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvY29uc3RhbnRzL2NvbmZpZy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9EO0FBRTdDLE1BQU1FLGdCQUFnQjtJQUMzQjtRQUFFQyxPQUFPRiwrQ0FBV0EsQ0FBQ0csUUFBUTtRQUFFQyxPQUFPO1FBQVlDLGFBQWE7SUFBUztJQUN4RTtRQUFFSCxPQUFPRiwrQ0FBV0EsQ0FBQ00sUUFBUTtRQUFFRixPQUFPO1FBQVlDLGFBQWE7SUFBVTtJQUN6RTtRQUFFSCxPQUFPRiwrQ0FBV0EsQ0FBQ08sUUFBUTtRQUFFSCxPQUFPO1FBQVlDLGFBQWE7SUFBVztDQUMzRSxDQUFDO0FBRUssTUFBTUcsa0JBQWtCLE1BQU07QUFDOUIsTUFBTUMscUJBQXFCLEdBQUc7QUFDOUIsTUFBTUMsb0JBQW9CLEVBQUUsQ0FBQyxLQUFLO0FBQ2xDLE1BQU1DLHNCQUFzQixFQUFFLENBQUMsS0FBSztBQUNwQyxNQUFNQyw0QkFBNEIsR0FBRyxDQUFDLGlCQUFpQjtBQUV2RCxNQUFNQyxpQkFBaUI7SUFDNUJDLEtBQUs7SUFDTEMsS0FBSztBQUNQLEVBQUU7QUFFSyxNQUFNQyxpQkFBaUI7SUFDNUJGLEtBQUs7SUFDTEMsS0FBSztBQUNQLEVBQUU7QUFFSyxNQUFNRSxvQkFBb0I7SUFDL0JILEtBQUs7SUFDTEMsS0FBSztBQUNQLEVBQUU7QUFFSyxNQUFNRyxnQkFBZ0IsTUFBTSxDQUFDLGFBQWE7QUFDMUMsTUFBTUMsdUJBQXVCLEtBQUssQ0FBQyxZQUFZO0FBRS9DLE1BQU1DLGlCQUFpQjtJQUM1QjtRQUNFQyxNQUFNdEIsZ0RBQVlBLENBQUN1QixjQUFjO1FBQ2pDQyxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsTUFBTTtJQUNSO0lBQ0E7UUFDRUosTUFBTXRCLGdEQUFZQSxDQUFDMkIsa0JBQWtCO1FBQ3JDSCxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsTUFBTTtJQUNSO0lBQ0E7UUFDRUosTUFBTXRCLGdEQUFZQSxDQUFDNEIsa0JBQWtCO1FBQ3JDSixNQUFNO1FBQ05DLGFBQWE7UUFDYkMsTUFBTTtJQUNSO0lBQ0E7UUFDRUosTUFBTXRCLGdEQUFZQSxDQUFDNkIsa0JBQWtCO1FBQ3JDTCxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsTUFBTTtJQUNSO0lBQ0E7UUFDRUosTUFBTXRCLGdEQUFZQSxDQUFDOEIsb0JBQW9CO1FBQ3ZDTixNQUFNO1FBQ05DLGFBQWE7UUFDYkMsTUFBTTtJQUNSO0lBQ0E7UUFDRUosTUFBTXRCLGdEQUFZQSxDQUFDK0IsY0FBYztRQUNqQ1AsTUFBTTtRQUNOQyxhQUFhO1FBQ2JDLE1BQU07SUFDUjtDQUNELENBQUM7QUFFSyxNQUFNTSxvQkFBb0I7SUFDL0I7UUFBRTdCLE9BQU87UUFBR0UsT0FBTztJQUFpQjtJQUNwQztRQUFFRixPQUFPO1FBQUlFLE9BQU87SUFBYTtJQUNqQztRQUFFRixPQUFPO1FBQUlFLE9BQU87SUFBa0I7SUFDdEM7UUFBRUYsT0FBTztRQUFLRSxPQUFPO0lBQW9CO0NBQzFDLENBQUM7QUFFSyxNQUFNNEIsUUFBUTtJQUNuQlQsTUFBTTtJQUNOVSxNQUFNO0lBQ05DLFNBQVM7SUFDVEMsYUFBYTtBQUNmLEVBQUU7QUFFSyxNQUFNQyxlQUFlO0lBQzFCQyxNQUFNO0lBQ05DLE1BQU07SUFDTkMsU0FBUztJQUNUQyxRQUFRO0lBQ1JDLE1BQU07SUFDTkMsS0FBSztJQUNMQyxRQUFRO0FBQ1YsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKUFxccHBwcHBwcHBwcHBwcHBwcHBcXHBvdlxcY3J5cHRvLXRyYWRpbmctYm90XFxzcmNcXGNvbnN0YW50c1xcY29uZmlnLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0cmF0ZWd5VHlwZSwgVHJhZGluZ1BhaXIgfSBmcm9tICdAL3R5cGVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBUUkFESU5HX1BBSVJTID0gW1xyXG4gIHsgdmFsdWU6IFRyYWRpbmdQYWlyLlNPTF9VU0RDLCBsYWJlbDogJ1NPTC9VU0RDJywgY29pbkdlY2tvSWQ6ICdzb2xhbmEnIH0sXHJcbiAgeyB2YWx1ZTogVHJhZGluZ1BhaXIuQlRDX1VTRFQsIGxhYmVsOiAnQlRDL1VTRFQnLCBjb2luR2Vja29JZDogJ2JpdGNvaW4nIH0sXHJcbiAgeyB2YWx1ZTogVHJhZGluZ1BhaXIuRVRIX1VTREMsIGxhYmVsOiAnRVRIL1VTREMnLCBjb2luR2Vja29JZDogJ2V0aGVyZXVtJyB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQ0FQSVRBTCA9IDEwMDAwO1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9SSVNLX0xFVkVMID0gNTA7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1NUT1BfTE9TUyA9IDI7IC8vIDIlXHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RBS0VfUFJPRklUID0gNTsgLy8gNSVcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfTUFYX1BPU0lUSU9OX1NJWkUgPSAyMDsgLy8gMjAlIG9mIGNhcGl0YWxcclxuXHJcbmV4cG9ydCBjb25zdCBTTElQUEFHRV9SQU5HRSA9IHtcclxuICBtaW46IDAuMDAxLCAvLyAwLjElXHJcbiAgbWF4OiAwLjAwNSwgLy8gMC41JVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IFdJTl9SQVRFX1JBTkdFID0ge1xyXG4gIG1pbjogMC42NSwgLy8gNjUlXHJcbiAgbWF4OiAwLjgwLCAvLyA4MCVcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBNT05USExZX1JPSV9SQU5HRSA9IHtcclxuICBtaW46IDAuMDgsIC8vIDglXHJcbiAgbWF4OiAwLjI1LCAvLyAyNSVcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBUSUNLX0lOVEVSVkFMID0gMTAwMDA7IC8vIDEwIHNlY29uZHNcclxuZXhwb3J0IGNvbnN0IFBSSUNFX0NBQ0hFX0RVUkFUSU9OID0gNTAwMDsgLy8gNSBzZWNvbmRzXHJcblxyXG5leHBvcnQgY29uc3QgUE9WX1NUUkFURUdJRVMgPSBbXHJcbiAge1xyXG4gICAgdHlwZTogU3RyYXRlZ3lUeXBlLk1PTUVOVFVNX1NVUkdFLFxyXG4gICAgbmFtZTogJ01vbWVudHVtIFN1cmdlJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnRGV0ZWN0cyByYXBpZCBwcmljZSBtb21lbnR1bSBzaGlmdHMgdXNpbmcgUlNJIGFuZCB2b2x1bWUgc3Bpa2UgZGV0ZWN0aW9uJyxcclxuICAgIGljb246ICfimqEnLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdHlwZTogU3RyYXRlZ3lUeXBlLlZPTEFUSUxJVFlfSEFSVkVTVCxcclxuICAgIG5hbWU6ICdWb2xhdGlsaXR5IEhhcnZlc3QnLFxyXG4gICAgZGVzY3JpcHRpb246ICdFeHBsb2l0cyBtYXJrZXQgdm9sYXRpbGl0eSBwYXR0ZXJucyB3aXRoIEJvbGxpbmdlciBCYW5kcyBhbmQgQVRSJyxcclxuICAgIGljb246ICfwn4yKJyxcclxuICB9LFxyXG4gIHtcclxuICAgIHR5cGU6IFN0cmF0ZWd5VHlwZS5UUkVORF9SRVZFUlNBTF9QUk8sXHJcbiAgICBuYW1lOiAnVHJlbmQgUmV2ZXJzYWwgUHJvJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnSWRlbnRpZmllcyB0cmVuZCByZXZlcnNhbHMgYmVmb3JlIHRoZXkgaGFwcGVuIHVzaW5nIE1BQ0QgYW5kIGNhbmRsZXN0aWNrIHBhdHRlcm5zJyxcclxuICAgIGljb246ICfwn5SEJyxcclxuICB9LFxyXG4gIHtcclxuICAgIHR5cGU6IFN0cmF0ZWd5VHlwZS5TTUFSVF9FTlRSWV9QT0lOVFMsXHJcbiAgICBuYW1lOiAnU21hcnQgRW50cnkgUG9pbnRzJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnQUktcG93ZXJlZCBvcHRpbWFsIGVudHJ5L2V4aXQgdGltaW5nIHdpdGggbXVsdGlwbGUgaW5kaWNhdG9yIGNvbmZsdWVuY2UnLFxyXG4gICAgaWNvbjogJ/Cfjq8nLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgdHlwZTogU3RyYXRlZ3lUeXBlLk1VTFRJX1RJTUVGUkFNRV9TWU5DLFxyXG4gICAgbmFtZTogJ011bHRpLVRpbWVmcmFtZSBTeW5jJyxcclxuICAgIGRlc2NyaXB0aW9uOiAnQ29tYmluZXMgc2lnbmFscyBhY3Jvc3MgMWgsIDRoLCBhbmQgMWQgdGltZWZyYW1lcyBmb3IgbWF4aW11bSBhY2N1cmFjeScsXHJcbiAgICBpY29uOiAn8J+TiicsXHJcbiAgfSxcclxuICB7XHJcbiAgICB0eXBlOiBTdHJhdGVneVR5cGUuTElRVUlESVRZX0ZMT1csXHJcbiAgICBuYW1lOiAnTGlxdWlkaXR5IEZsb3cnLFxyXG4gICAgZGVzY3JpcHRpb246ICdGb2xsb3dzIHdoYWxlIHdhbGxldCBtb3ZlbWVudHMgYW5kIGxpcXVpZGl0eSBwYXR0ZXJucycsXHJcbiAgICBpY29uOiAn8J+QiycsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBTSU1VTEFUSU9OX1NQRUVEUyA9IFtcclxuICB7IHZhbHVlOiAxLCBsYWJlbDogJzF4IChSZWFsLXRpbWUpJyB9LFxyXG4gIHsgdmFsdWU6IDEwLCBsYWJlbDogJzEweCAoRmFzdCknIH0sXHJcbiAgeyB2YWx1ZTogNTAsIGxhYmVsOiAnNTB4IChWZXJ5IEZhc3QpJyB9LFxyXG4gIHsgdmFsdWU6IDEwMCwgbGFiZWw6ICcxMDB4IChVbHRyYSBGYXN0KScgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBCUkFORCA9IHtcclxuICBuYW1lOiAnUC5PLlYgVFJBRElORyBCT1QnLFxyXG4gIHRlYW06ICdQLk8uVicsXHJcbiAgdGFnbGluZTogJ0VsaXRlIEFsZ29yaXRobWljIFRyYWRpbmcgZm9yIENyeXB0bycsXHJcbiAgZnVsbFRhZ2xpbmU6ICdFeGNsdXNpdmUgUHJvcHJpZXRhcnkgU3RyYXRlZ2llcycsXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgVEhFTUVfQ09MT1JTID0ge1xyXG4gIG5hdnk6ICcjMGEwZTI3JyxcclxuICBjeWFuOiAnIzAwZDlmZicsXHJcbiAgZW1lcmFsZDogJyMwMGZmODgnLFxyXG4gIHZpb2xldDogJyNiMDAwZmYnLFxyXG4gIGxpbWU6ICcjMDBmZjAwJyxcclxuICByZWQ6ICcjZmYwMDU1JyxcclxuICBvcmFuZ2U6ICcjZmY5NTAwJyxcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIlN0cmF0ZWd5VHlwZSIsIlRyYWRpbmdQYWlyIiwiVFJBRElOR19QQUlSUyIsInZhbHVlIiwiU09MX1VTREMiLCJsYWJlbCIsImNvaW5HZWNrb0lkIiwiQlRDX1VTRFQiLCJFVEhfVVNEQyIsIkRFRkFVTFRfQ0FQSVRBTCIsIkRFRkFVTFRfUklTS19MRVZFTCIsIkRFRkFVTFRfU1RPUF9MT1NTIiwiREVGQVVMVF9UQUtFX1BST0ZJVCIsIkRFRkFVTFRfTUFYX1BPU0lUSU9OX1NJWkUiLCJTTElQUEFHRV9SQU5HRSIsIm1pbiIsIm1heCIsIldJTl9SQVRFX1JBTkdFIiwiTU9OVEhMWV9ST0lfUkFOR0UiLCJUSUNLX0lOVEVSVkFMIiwiUFJJQ0VfQ0FDSEVfRFVSQVRJT04iLCJQT1ZfU1RSQVRFR0lFUyIsInR5cGUiLCJNT01FTlRVTV9TVVJHRSIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImljb24iLCJWT0xBVElMSVRZX0hBUlZFU1QiLCJUUkVORF9SRVZFUlNBTF9QUk8iLCJTTUFSVF9FTlRSWV9QT0lOVFMiLCJNVUxUSV9USU1FRlJBTUVfU1lOQyIsIkxJUVVJRElUWV9GTE9XIiwiU0lNVUxBVElPTl9TUEVFRFMiLCJCUkFORCIsInRlYW0iLCJ0YWdsaW5lIiwiZnVsbFRhZ2xpbmUiLCJUSEVNRV9DT0xPUlMiLCJuYXZ5IiwiY3lhbiIsImVtZXJhbGQiLCJ2aW9sZXQiLCJsaW1lIiwicmVkIiwib3JhbmdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/constants/config.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/backgroundWorker.ts":
/*!*************************************!*\
  !*** ./src/lib/backgroundWorker.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processBotTick: () => (/* binding */ processBotTick),\n/* harmony export */   startBackgroundWorker: () => (/* binding */ startBackgroundWorker)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types/index.ts\");\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n/* harmony import */ var _priceFeeds__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./priceFeeds */ \"(rsc)/./src/lib/priceFeeds.ts\");\n/* harmony import */ var _tradingEngine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tradingEngine */ \"(rsc)/./src/lib/tradingEngine.ts\");\n\n\n\n\nasync function processBotTick() {\n    try {\n        // Fetch current prices\n        const prices = await (0,_priceFeeds__WEBPACK_IMPORTED_MODULE_2__.fetchCoinGeckoPrices)();\n        const priceMap = new Map(prices.map((p)=>[\n                p.pair,\n                p.price\n            ]));\n        // Get all active bots\n        const botsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_1__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_1__.COLLECTIONS.BOTS);\n        const activeBots = await botsCollection.find({\n            status: _types__WEBPACK_IMPORTED_MODULE_0__.BotStatus.ACTIVE\n        }).toArray();\n        let totalNewTrades = 0;\n        // Process each active bot\n        for (const bot of activeBots){\n            try {\n                // Update open positions (check for stop loss / take profit)\n                await (0,_tradingEngine__WEBPACK_IMPORTED_MODULE_3__.updateOpenPositions)(bot, priceMap);\n                // Evaluate strategy and potentially execute new trades\n                const newTrades = await (0,_tradingEngine__WEBPACK_IMPORTED_MODULE_3__.evaluateAndExecuteStrategy)(bot, priceMap);\n                totalNewTrades += newTrades.length;\n                // Update bot's last tick timestamp\n                await botsCollection.updateOne({\n                    _id: bot._id\n                }, {\n                    $set: {\n                        lastTickAt: new Date()\n                    }\n                });\n            } catch (error) {\n                console.error(`Error processing bot ${bot._id}:`, error);\n                // Log error\n                const logsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_1__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_1__.COLLECTIONS.LOGS);\n                await logsCollection.insertOne({\n                    userId: bot.userId,\n                    botId: bot._id.toString(),\n                    type: 'ERROR',\n                    message: `Error processing bot tick: ${error instanceof Error ? error.message : 'Unknown error'}`,\n                    timestamp: new Date()\n                });\n            }\n        }\n        return {\n            success: true,\n            processedBots: activeBots.length,\n            newTrades: totalNewTrades,\n            prices\n        };\n    } catch (error) {\n        console.error('Error in processBotTick:', error);\n        return {\n            success: false,\n            processedBots: 0,\n            newTrades: 0,\n            prices: [],\n            error: error instanceof Error ? error.message : 'Unknown error'\n        };\n    }\n}\nasync function startBackgroundWorker() {\n    // This function would start a continuous worker\n    // For Next.js, we'll implement this through API polling from the client\n    console.log('Background worker started (client-side polling mode)');\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2JhY2tncm91bmRXb3JrZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9EO0FBQ0c7QUFDSDtBQUM4QjtBQUUzRSxlQUFlTTtJQU9wQixJQUFJO1FBQ0YsdUJBQXVCO1FBQ3ZCLE1BQU1DLFNBQVMsTUFBTUosaUVBQW9CQTtRQUN6QyxNQUFNSyxXQUFXLElBQUlDLElBQUlGLE9BQU9HLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBSztnQkFBQ0EsRUFBRUMsSUFBSTtnQkFBRUQsRUFBRUUsS0FBSzthQUFDO1FBRTFELHNCQUFzQjtRQUN0QixNQUFNQyxpQkFBaUIsTUFBTWIsdURBQWFBLENBQUNDLGlEQUFXQSxDQUFDYSxJQUFJO1FBQzNELE1BQU1DLGFBQWEsTUFBTUYsZUFDdEJHLElBQUksQ0FBQztZQUFFQyxRQUFRbEIsNkNBQVNBLENBQUNtQixNQUFNO1FBQUMsR0FDaENDLE9BQU87UUFFVixJQUFJQyxpQkFBaUI7UUFFckIsMEJBQTBCO1FBQzFCLEtBQUssTUFBTUMsT0FBT04sV0FBWTtZQUM1QixJQUFJO2dCQUNGLDREQUE0RDtnQkFDNUQsTUFBTVosbUVBQW1CQSxDQUFDa0IsS0FBS2Q7Z0JBRS9CLHVEQUF1RDtnQkFDdkQsTUFBTWUsWUFBWSxNQUFNbEIsMEVBQTBCQSxDQUFDaUIsS0FBS2Q7Z0JBQ3hEYSxrQkFBa0JFLFVBQVVDLE1BQU07Z0JBRWxDLG1DQUFtQztnQkFDbkMsTUFBTVYsZUFBZVcsU0FBUyxDQUM1QjtvQkFBRUMsS0FBS0osSUFBSUksR0FBRztnQkFBQyxHQUNmO29CQUFFQyxNQUFNO3dCQUFFQyxZQUFZLElBQUlDO29CQUFPO2dCQUFFO1lBRXZDLEVBQUUsT0FBT0MsT0FBTztnQkFDZEMsUUFBUUQsS0FBSyxDQUFDLENBQUMscUJBQXFCLEVBQUVSLElBQUlJLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRUk7Z0JBRWxELFlBQVk7Z0JBQ1osTUFBTUUsaUJBQWlCLE1BQU0vQix1REFBYUEsQ0FBQ0MsaURBQVdBLENBQUMrQixJQUFJO2dCQUMzRCxNQUFNRCxlQUFlRSxTQUFTLENBQUM7b0JBQzdCQyxRQUFRYixJQUFJYSxNQUFNO29CQUNsQkMsT0FBT2QsSUFBSUksR0FBRyxDQUFFVyxRQUFRO29CQUN4QkMsTUFBTTtvQkFDTkMsU0FBUyxDQUFDLDJCQUEyQixFQUFFVCxpQkFBaUJVLFFBQVFWLE1BQU1TLE9BQU8sR0FBRyxpQkFBaUI7b0JBQ2pHRSxXQUFXLElBQUlaO2dCQUNqQjtZQUNGO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xhLFNBQVM7WUFDVEMsZUFBZTNCLFdBQVdRLE1BQU07WUFDaENELFdBQVdGO1lBQ1hkO1FBQ0Y7SUFDRixFQUFFLE9BQU91QixPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyw0QkFBNEJBO1FBQzFDLE9BQU87WUFDTFksU0FBUztZQUNUQyxlQUFlO1lBQ2ZwQixXQUFXO1lBQ1hoQixRQUFRLEVBQUU7WUFDVnVCLE9BQU9BLGlCQUFpQlUsUUFBUVYsTUFBTVMsT0FBTyxHQUFHO1FBQ2xEO0lBQ0Y7QUFDRjtBQUVPLGVBQWVLO0lBQ3BCLGdEQUFnRDtJQUNoRCx3RUFBd0U7SUFDeEViLFFBQVFjLEdBQUcsQ0FBQztBQUNkIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEpQXFxwcHBwcHBwcHBwcHBwcHBwcFxccG92XFxjcnlwdG8tdHJhZGluZy1ib3RcXHNyY1xcbGliXFxiYWNrZ3JvdW5kV29ya2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdCwgQm90U3RhdHVzLCBQcmljZURhdGEgfSBmcm9tICdAL3R5cGVzJztcclxuaW1wb3J0IHsgZ2V0Q29sbGVjdGlvbiwgQ09MTEVDVElPTlMgfSBmcm9tICcuL21vbmdvZGInO1xyXG5pbXBvcnQgeyBmZXRjaENvaW5HZWNrb1ByaWNlcyB9IGZyb20gJy4vcHJpY2VGZWVkcyc7XHJcbmltcG9ydCB7IHVwZGF0ZU9wZW5Qb3NpdGlvbnMsIGV2YWx1YXRlQW5kRXhlY3V0ZVN0cmF0ZWd5IH0gZnJvbSAnLi90cmFkaW5nRW5naW5lJztcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzQm90VGljaygpOiBQcm9taXNlPHtcclxuICBzdWNjZXNzOiBib29sZWFuO1xyXG4gIHByb2Nlc3NlZEJvdHM6IG51bWJlcjtcclxuICBuZXdUcmFkZXM6IG51bWJlcjtcclxuICBwcmljZXM6IFByaWNlRGF0YVtdO1xyXG4gIGVycm9yPzogc3RyaW5nO1xyXG59PiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIEZldGNoIGN1cnJlbnQgcHJpY2VzXHJcbiAgICBjb25zdCBwcmljZXMgPSBhd2FpdCBmZXRjaENvaW5HZWNrb1ByaWNlcygpO1xyXG4gICAgY29uc3QgcHJpY2VNYXAgPSBuZXcgTWFwKHByaWNlcy5tYXAocCA9PiBbcC5wYWlyLCBwLnByaWNlXSkpO1xyXG4gICAgXHJcbiAgICAvLyBHZXQgYWxsIGFjdGl2ZSBib3RzXHJcbiAgICBjb25zdCBib3RzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbGxlY3Rpb24oQ09MTEVDVElPTlMuQk9UUyk7XHJcbiAgICBjb25zdCBhY3RpdmVCb3RzID0gYXdhaXQgYm90c0NvbGxlY3Rpb25cclxuICAgICAgLmZpbmQoeyBzdGF0dXM6IEJvdFN0YXR1cy5BQ1RJVkUgfSlcclxuICAgICAgLnRvQXJyYXkoKSBhcyB1bmtub3duIGFzIEJvdFtdO1xyXG4gICAgXHJcbiAgICBsZXQgdG90YWxOZXdUcmFkZXMgPSAwO1xyXG4gICAgXHJcbiAgICAvLyBQcm9jZXNzIGVhY2ggYWN0aXZlIGJvdFxyXG4gICAgZm9yIChjb25zdCBib3Qgb2YgYWN0aXZlQm90cykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIC8vIFVwZGF0ZSBvcGVuIHBvc2l0aW9ucyAoY2hlY2sgZm9yIHN0b3AgbG9zcyAvIHRha2UgcHJvZml0KVxyXG4gICAgICAgIGF3YWl0IHVwZGF0ZU9wZW5Qb3NpdGlvbnMoYm90LCBwcmljZU1hcCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gRXZhbHVhdGUgc3RyYXRlZ3kgYW5kIHBvdGVudGlhbGx5IGV4ZWN1dGUgbmV3IHRyYWRlc1xyXG4gICAgICAgIGNvbnN0IG5ld1RyYWRlcyA9IGF3YWl0IGV2YWx1YXRlQW5kRXhlY3V0ZVN0cmF0ZWd5KGJvdCwgcHJpY2VNYXApO1xyXG4gICAgICAgIHRvdGFsTmV3VHJhZGVzICs9IG5ld1RyYWRlcy5sZW5ndGg7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gVXBkYXRlIGJvdCdzIGxhc3QgdGljayB0aW1lc3RhbXBcclxuICAgICAgICBhd2FpdCBib3RzQ29sbGVjdGlvbi51cGRhdGVPbmUoXHJcbiAgICAgICAgICB7IF9pZDogYm90Ll9pZCB9LFxyXG4gICAgICAgICAgeyAkc2V0OiB7IGxhc3RUaWNrQXQ6IG5ldyBEYXRlKCkgfSB9XHJcbiAgICAgICAgKTtcclxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBwcm9jZXNzaW5nIGJvdCAke2JvdC5faWR9OmAsIGVycm9yKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBMb2cgZXJyb3JcclxuICAgICAgICBjb25zdCBsb2dzQ29sbGVjdGlvbiA9IGF3YWl0IGdldENvbGxlY3Rpb24oQ09MTEVDVElPTlMuTE9HUyk7XHJcbiAgICAgICAgYXdhaXQgbG9nc0NvbGxlY3Rpb24uaW5zZXJ0T25lKHtcclxuICAgICAgICAgIHVzZXJJZDogYm90LnVzZXJJZCxcclxuICAgICAgICAgIGJvdElkOiBib3QuX2lkIS50b1N0cmluZygpLFxyXG4gICAgICAgICAgdHlwZTogJ0VSUk9SJyxcclxuICAgICAgICAgIG1lc3NhZ2U6IGBFcnJvciBwcm9jZXNzaW5nIGJvdCB0aWNrOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWAsXHJcbiAgICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgc3VjY2VzczogdHJ1ZSxcclxuICAgICAgcHJvY2Vzc2VkQm90czogYWN0aXZlQm90cy5sZW5ndGgsXHJcbiAgICAgIG5ld1RyYWRlczogdG90YWxOZXdUcmFkZXMsXHJcbiAgICAgIHByaWNlcyxcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluIHByb2Nlc3NCb3RUaWNrOicsIGVycm9yKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBwcm9jZXNzZWRCb3RzOiAwLFxyXG4gICAgICBuZXdUcmFkZXM6IDAsXHJcbiAgICAgIHByaWNlczogW10sXHJcbiAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3RhcnRCYWNrZ3JvdW5kV29ya2VyKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gIC8vIFRoaXMgZnVuY3Rpb24gd291bGQgc3RhcnQgYSBjb250aW51b3VzIHdvcmtlclxyXG4gIC8vIEZvciBOZXh0LmpzLCB3ZSdsbCBpbXBsZW1lbnQgdGhpcyB0aHJvdWdoIEFQSSBwb2xsaW5nIGZyb20gdGhlIGNsaWVudFxyXG4gIGNvbnNvbGUubG9nKCdCYWNrZ3JvdW5kIHdvcmtlciBzdGFydGVkIChjbGllbnQtc2lkZSBwb2xsaW5nIG1vZGUpJyk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl0sIm5hbWVzIjpbIkJvdFN0YXR1cyIsImdldENvbGxlY3Rpb24iLCJDT0xMRUNUSU9OUyIsImZldGNoQ29pbkdlY2tvUHJpY2VzIiwidXBkYXRlT3BlblBvc2l0aW9ucyIsImV2YWx1YXRlQW5kRXhlY3V0ZVN0cmF0ZWd5IiwicHJvY2Vzc0JvdFRpY2siLCJwcmljZXMiLCJwcmljZU1hcCIsIk1hcCIsIm1hcCIsInAiLCJwYWlyIiwicHJpY2UiLCJib3RzQ29sbGVjdGlvbiIsIkJPVFMiLCJhY3RpdmVCb3RzIiwiZmluZCIsInN0YXR1cyIsIkFDVElWRSIsInRvQXJyYXkiLCJ0b3RhbE5ld1RyYWRlcyIsImJvdCIsIm5ld1RyYWRlcyIsImxlbmd0aCIsInVwZGF0ZU9uZSIsIl9pZCIsIiRzZXQiLCJsYXN0VGlja0F0IiwiRGF0ZSIsImVycm9yIiwiY29uc29sZSIsImxvZ3NDb2xsZWN0aW9uIiwiTE9HUyIsImluc2VydE9uZSIsInVzZXJJZCIsImJvdElkIiwidG9TdHJpbmciLCJ0eXBlIiwibWVzc2FnZSIsIkVycm9yIiwidGltZXN0YW1wIiwic3VjY2VzcyIsInByb2Nlc3NlZEJvdHMiLCJzdGFydEJhY2tncm91bmRXb3JrZXIiLCJsb2ciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/backgroundWorker.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/calculations.ts":
/*!*********************************!*\
  !*** ./src/lib/calculations.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applySlippage: () => (/* binding */ applySlippage),\n/* harmony export */   calculateMonthlyROI: () => (/* binding */ calculateMonthlyROI),\n/* harmony export */   calculatePerformanceMetrics: () => (/* binding */ calculatePerformanceMetrics),\n/* harmony export */   calculatePnL: () => (/* binding */ calculatePnL),\n/* harmony export */   calculatePositionSize: () => (/* binding */ calculatePositionSize),\n/* harmony export */   shouldTriggerStopLoss: () => (/* binding */ shouldTriggerStopLoss),\n/* harmony export */   shouldTriggerTakeProfit: () => (/* binding */ shouldTriggerTakeProfit)\n/* harmony export */ });\nfunction calculatePnL(entryPrice, currentPrice, quantity, tradeType) {\n    let pnl;\n    if (tradeType === 'BUY') {\n        pnl = (currentPrice - entryPrice) * quantity;\n    } else {\n        pnl = (entryPrice - currentPrice) * quantity;\n    }\n    const pnlPercentage = pnl / (entryPrice * quantity) * 100;\n    return {\n        pnl,\n        pnlPercentage\n    };\n}\nfunction calculatePerformanceMetrics(trades) {\n    if (trades.length === 0) {\n        return {\n            roi: 0,\n            winRate: 0,\n            totalProfit: 0,\n            totalLoss: 0,\n            netProfit: 0,\n            drawdown: 0,\n            sharpeRatio: 0,\n            totalTrades: 0,\n            winningTrades: 0,\n            losingTrades: 0,\n            averageWin: 0,\n            averageLoss: 0,\n            profitFactor: 0\n        };\n    }\n    // Only consider closed trades for metrics\n    const closedTrades = trades.filter((t)=>!t.isOpen && t.pnl !== undefined);\n    if (closedTrades.length === 0) {\n        return {\n            roi: 0,\n            winRate: 0,\n            totalProfit: 0,\n            totalLoss: 0,\n            netProfit: 0,\n            drawdown: 0,\n            sharpeRatio: 0,\n            totalTrades: 0,\n            winningTrades: 0,\n            losingTrades: 0,\n            averageWin: 0,\n            averageLoss: 0,\n            profitFactor: 0\n        };\n    }\n    const winningTrades = closedTrades.filter((t)=>(t.pnl || 0) > 0);\n    const losingTrades = closedTrades.filter((t)=>(t.pnl || 0) < 0);\n    const totalProfit = winningTrades.reduce((sum, t)=>sum + (t.pnl || 0), 0);\n    const totalLoss = Math.abs(losingTrades.reduce((sum, t)=>sum + (t.pnl || 0), 0));\n    const netProfit = totalProfit - totalLoss;\n    const totalCapitalInvested = closedTrades.reduce((sum, t)=>sum + t.entryPrice * t.quantity, 0);\n    const roi = totalCapitalInvested > 0 ? netProfit / totalCapitalInvested * 100 : 0;\n    const winRate = winningTrades.length / closedTrades.length * 100;\n    const averageWin = winningTrades.length > 0 ? totalProfit / winningTrades.length : 0;\n    const averageLoss = losingTrades.length > 0 ? totalLoss / losingTrades.length : 0;\n    const profitFactor = totalLoss > 0 ? totalProfit / totalLoss : totalProfit > 0 ? 999 : 0;\n    // Calculate drawdown\n    let peak = 0;\n    let maxDrawdown = 0;\n    let runningPnL = 0;\n    closedTrades.forEach((trade)=>{\n        runningPnL += trade.pnl || 0;\n        if (runningPnL > peak) {\n            peak = runningPnL;\n        }\n        const drawdown = peak - runningPnL;\n        if (drawdown > maxDrawdown) {\n            maxDrawdown = drawdown;\n        }\n    });\n    const drawdownPercentage = peak > 0 ? maxDrawdown / peak * 100 : 0;\n    // Calculate Sharpe Ratio (simplified)\n    const returns = closedTrades.map((t)=>(t.pnlPercentage || 0) / 100);\n    const avgReturn = returns.reduce((sum, r)=>sum + r, 0) / returns.length;\n    const variance = returns.reduce((sum, r)=>sum + Math.pow(r - avgReturn, 2), 0) / returns.length;\n    const stdDev = Math.sqrt(variance);\n    const sharpeRatio = stdDev > 0 ? avgReturn / stdDev * Math.sqrt(252) : 0; // Annualized\n    return {\n        roi,\n        winRate,\n        totalProfit,\n        totalLoss,\n        netProfit,\n        drawdown: drawdownPercentage,\n        sharpeRatio,\n        totalTrades: closedTrades.length,\n        winningTrades: winningTrades.length,\n        losingTrades: losingTrades.length,\n        averageWin,\n        averageLoss,\n        profitFactor\n    };\n}\nfunction calculatePositionSize(capital, riskPercentage, entryPrice, stopLossPercentage) {\n    // Calculate maximum trade amount based on risk percentage\n    const maxTradeAmount = capital * (riskPercentage / 100);\n    // Calculate position size based on available capital and entry price\n    const positionSize = maxTradeAmount / entryPrice;\n    // Ensure we don't exceed available capital\n    const maxAffordableSize = capital / entryPrice;\n    return Math.min(positionSize, maxAffordableSize);\n}\nfunction shouldTriggerStopLoss(entryPrice, currentPrice, stopLossPercentage, tradeType) {\n    if (tradeType === 'BUY') {\n        const lossPercentage = (currentPrice - entryPrice) / entryPrice * 100;\n        return lossPercentage <= -stopLossPercentage;\n    } else {\n        const lossPercentage = (entryPrice - currentPrice) / entryPrice * 100;\n        return lossPercentage <= -stopLossPercentage;\n    }\n}\nfunction shouldTriggerTakeProfit(entryPrice, currentPrice, takeProfitPercentage, tradeType) {\n    if (tradeType === 'BUY') {\n        const profitPercentage = (currentPrice - entryPrice) / entryPrice * 100;\n        return profitPercentage >= takeProfitPercentage;\n    } else {\n        const profitPercentage = (entryPrice - currentPrice) / entryPrice * 100;\n        return profitPercentage >= takeProfitPercentage;\n    }\n}\nfunction applySlippage(price, minSlippage, maxSlippage) {\n    const slippage = minSlippage + Math.random() * (maxSlippage - minSlippage);\n    return price * (1 + slippage);\n}\nfunction calculateMonthlyROI(totalROI, daysElapsed) {\n    if (daysElapsed === 0) return 0;\n    return totalROI / daysElapsed * 30;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/calculations.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/mongodb.ts":
/*!****************************!*\
  !*** ./src/lib/mongodb.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   COLLECTIONS: () => (/* binding */ COLLECTIONS),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getCollection: () => (/* binding */ getCollection),\n/* harmony export */   getDatabase: () => (/* binding */ getDatabase)\n/* harmony export */ });\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mongodb */ \"mongodb\");\n/* harmony import */ var mongodb__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mongodb__WEBPACK_IMPORTED_MODULE_0__);\n\nif (!process.env.MONGODB_URI) {\n    throw new Error('Please add your MongoDB URI to .env.local');\n}\nconst uri = process.env.MONGODB_URI;\nconst options = {};\nlet client;\nlet clientPromise;\nif (true) {\n    // In development mode, use a global variable to preserve the connection across hot reloads\n    let globalWithMongo = global;\n    if (!globalWithMongo._mongoClientPromise) {\n        client = new mongodb__WEBPACK_IMPORTED_MODULE_0__.MongoClient(uri, options);\n        globalWithMongo._mongoClientPromise = client.connect();\n    }\n    clientPromise = globalWithMongo._mongoClientPromise;\n} else {}\nasync function getDatabase() {\n    const client = await clientPromise;\n    return client.db('pov-trading-bot');\n}\nasync function getCollection(collectionName) {\n    const db = await getDatabase();\n    return db.collection(collectionName);\n}\n// Collection names\nconst COLLECTIONS = {\n    USERS: 'users',\n    BOTS: 'bots',\n    TRADES: 'trades',\n    STRATEGIES: 'strategies',\n    SETTINGS: 'settings',\n    LOGS: 'logs'\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (clientPromise);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL21vbmdvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQTBDO0FBRTFDLElBQUksQ0FBQ0MsUUFBUUMsR0FBRyxDQUFDQyxXQUFXLEVBQUU7SUFDNUIsTUFBTSxJQUFJQyxNQUFNO0FBQ2xCO0FBRUEsTUFBTUMsTUFBTUosUUFBUUMsR0FBRyxDQUFDQyxXQUFXO0FBQ25DLE1BQU1HLFVBQVUsQ0FBQztBQUVqQixJQUFJQztBQUNKLElBQUlDO0FBRUosSUFBSVAsSUFBc0MsRUFBRTtJQUMxQywyRkFBMkY7SUFDM0YsSUFBSVEsa0JBQWtCQztJQUl0QixJQUFJLENBQUNELGdCQUFnQkUsbUJBQW1CLEVBQUU7UUFDeENKLFNBQVMsSUFBSVAsZ0RBQVdBLENBQUNLLEtBQUtDO1FBQzlCRyxnQkFBZ0JFLG1CQUFtQixHQUFHSixPQUFPSyxPQUFPO0lBQ3REO0lBQ0FKLGdCQUFnQkMsZ0JBQWdCRSxtQkFBbUI7QUFDckQsT0FBTyxFQUlOO0FBRU0sZUFBZUU7SUFDcEIsTUFBTU4sU0FBUyxNQUFNQztJQUNyQixPQUFPRCxPQUFPTyxFQUFFLENBQUM7QUFDbkI7QUFFTyxlQUFlQyxjQUFjQyxjQUFzQjtJQUN4RCxNQUFNRixLQUFLLE1BQU1EO0lBQ2pCLE9BQU9DLEdBQUdHLFVBQVUsQ0FBQ0Q7QUFDdkI7QUFFQSxtQkFBbUI7QUFDWixNQUFNRSxjQUFjO0lBQ3pCQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsUUFBUTtJQUNSQyxZQUFZO0lBQ1pDLFVBQVU7SUFDVkMsTUFBTTtBQUNSLEVBQUU7QUFFRixpRUFBZWhCLGFBQWFBLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcSlBcXHBwcHBwcHBwcHBwcHBwcHBwXFxwb3ZcXGNyeXB0by10cmFkaW5nLWJvdFxcc3JjXFxsaWJcXG1vbmdvZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9uZ29DbGllbnQsIERiIH0gZnJvbSAnbW9uZ29kYic7XHJcblxyXG5pZiAoIXByb2Nlc3MuZW52Lk1PTkdPREJfVVJJKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgYWRkIHlvdXIgTW9uZ29EQiBVUkkgdG8gLmVudi5sb2NhbCcpO1xyXG59XHJcblxyXG5jb25zdCB1cmkgPSBwcm9jZXNzLmVudi5NT05HT0RCX1VSSTtcclxuY29uc3Qgb3B0aW9ucyA9IHt9O1xyXG5cclxubGV0IGNsaWVudDogTW9uZ29DbGllbnQ7XHJcbmxldCBjbGllbnRQcm9taXNlOiBQcm9taXNlPE1vbmdvQ2xpZW50PjtcclxuXHJcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gIC8vIEluIGRldmVsb3BtZW50IG1vZGUsIHVzZSBhIGdsb2JhbCB2YXJpYWJsZSB0byBwcmVzZXJ2ZSB0aGUgY29ubmVjdGlvbiBhY3Jvc3MgaG90IHJlbG9hZHNcclxuICBsZXQgZ2xvYmFsV2l0aE1vbmdvID0gZ2xvYmFsIGFzIHR5cGVvZiBnbG9iYWxUaGlzICYge1xyXG4gICAgX21vbmdvQ2xpZW50UHJvbWlzZT86IFByb21pc2U8TW9uZ29DbGllbnQ+O1xyXG4gIH07XHJcblxyXG4gIGlmICghZ2xvYmFsV2l0aE1vbmdvLl9tb25nb0NsaWVudFByb21pc2UpIHtcclxuICAgIGNsaWVudCA9IG5ldyBNb25nb0NsaWVudCh1cmksIG9wdGlvbnMpO1xyXG4gICAgZ2xvYmFsV2l0aE1vbmdvLl9tb25nb0NsaWVudFByb21pc2UgPSBjbGllbnQuY29ubmVjdCgpO1xyXG4gIH1cclxuICBjbGllbnRQcm9taXNlID0gZ2xvYmFsV2l0aE1vbmdvLl9tb25nb0NsaWVudFByb21pc2U7XHJcbn0gZWxzZSB7XHJcbiAgLy8gSW4gcHJvZHVjdGlvbiBtb2RlLCBjcmVhdGUgYSBuZXcgY2xpZW50XHJcbiAgY2xpZW50ID0gbmV3IE1vbmdvQ2xpZW50KHVyaSwgb3B0aW9ucyk7XHJcbiAgY2xpZW50UHJvbWlzZSA9IGNsaWVudC5jb25uZWN0KCk7XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREYXRhYmFzZSgpOiBQcm9taXNlPERiPiB7XHJcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgY2xpZW50UHJvbWlzZTtcclxuICByZXR1cm4gY2xpZW50LmRiKCdwb3YtdHJhZGluZy1ib3QnKTtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldENvbGxlY3Rpb24oY29sbGVjdGlvbk5hbWU6IHN0cmluZykge1xyXG4gIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGF0YWJhc2UoKTtcclxuICByZXR1cm4gZGIuY29sbGVjdGlvbihjb2xsZWN0aW9uTmFtZSk7XHJcbn1cclxuXHJcbi8vIENvbGxlY3Rpb24gbmFtZXNcclxuZXhwb3J0IGNvbnN0IENPTExFQ1RJT05TID0ge1xyXG4gIFVTRVJTOiAndXNlcnMnLFxyXG4gIEJPVFM6ICdib3RzJyxcclxuICBUUkFERVM6ICd0cmFkZXMnLFxyXG4gIFNUUkFURUdJRVM6ICdzdHJhdGVnaWVzJyxcclxuICBTRVRUSU5HUzogJ3NldHRpbmdzJyxcclxuICBMT0dTOiAnbG9ncycsXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGllbnRQcm9taXNlO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiTW9uZ29DbGllbnQiLCJwcm9jZXNzIiwiZW52IiwiTU9OR09EQl9VUkkiLCJFcnJvciIsInVyaSIsIm9wdGlvbnMiLCJjbGllbnQiLCJjbGllbnRQcm9taXNlIiwiZ2xvYmFsV2l0aE1vbmdvIiwiZ2xvYmFsIiwiX21vbmdvQ2xpZW50UHJvbWlzZSIsImNvbm5lY3QiLCJnZXREYXRhYmFzZSIsImRiIiwiZ2V0Q29sbGVjdGlvbiIsImNvbGxlY3Rpb25OYW1lIiwiY29sbGVjdGlvbiIsIkNPTExFQ1RJT05TIiwiVVNFUlMiLCJCT1RTIiwiVFJBREVTIiwiU1RSQVRFR0lFUyIsIlNFVFRJTkdTIiwiTE9HUyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/mongodb.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/povStrategies.ts":
/*!**********************************!*\
  !*** ./src/lib/povStrategies.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeLiquidityFlow: () => (/* binding */ executeLiquidityFlow),\n/* harmony export */   executeMomentumSurge: () => (/* binding */ executeMomentumSurge),\n/* harmony export */   executeMultiTimeframeSync: () => (/* binding */ executeMultiTimeframeSync),\n/* harmony export */   executeSmartEntryPoints: () => (/* binding */ executeSmartEntryPoints),\n/* harmony export */   executeStrategy: () => (/* binding */ executeStrategy),\n/* harmony export */   executeTrendReversalPro: () => (/* binding */ executeTrendReversalPro),\n/* harmony export */   executeVolatilityHarvest: () => (/* binding */ executeVolatilityHarvest),\n/* harmony export */   updatePriceHistory: () => (/* binding */ updatePriceHistory)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types/index.ts\");\n\n// Store price history for each pair\nconst priceHistory = new Map();\nconst MAX_HISTORY = 100;\nfunction updatePriceHistory(pair, price) {\n    if (!priceHistory.has(pair)) {\n        priceHistory.set(pair, {\n            prices: [],\n            timestamps: []\n        });\n    }\n    const history = priceHistory.get(pair);\n    history.prices.push(price);\n    history.timestamps.push(new Date());\n    // Keep only last MAX_HISTORY entries\n    if (history.prices.length > MAX_HISTORY) {\n        history.prices.shift();\n        history.timestamps.shift();\n    }\n}\nfunction getPriceHistory(pair) {\n    return priceHistory.get(pair)?.prices || [];\n}\n// Technical indicator calculations\nfunction calculateRSI(prices, period = 14) {\n    if (prices.length < period + 1) return 50;\n    let gains = 0;\n    let losses = 0;\n    for(let i = prices.length - period; i < prices.length; i++){\n        const change = prices[i] - prices[i - 1];\n        if (change > 0) gains += change;\n        else losses -= change;\n    }\n    const avgGain = gains / period;\n    const avgLoss = losses / period;\n    if (avgLoss === 0) return 100;\n    const rs = avgGain / avgLoss;\n    return 100 - 100 / (1 + rs);\n}\nfunction calculateSMA(prices, period) {\n    if (prices.length < period) return prices[prices.length - 1] || 0;\n    const slice = prices.slice(-period);\n    return slice.reduce((sum, price)=>sum + price, 0) / period;\n}\nfunction calculateBollingerBands(prices, period = 20) {\n    const sma = calculateSMA(prices, period);\n    if (prices.length < period) {\n        return {\n            upper: sma * 1.02,\n            middle: sma,\n            lower: sma * 0.98\n        };\n    }\n    const slice = prices.slice(-period);\n    const variance = slice.reduce((sum, price)=>sum + Math.pow(price - sma, 2), 0) / period;\n    const stdDev = Math.sqrt(variance);\n    return {\n        upper: sma + 2 * stdDev,\n        middle: sma,\n        lower: sma - 2 * stdDev\n    };\n}\nfunction calculateMACD(prices) {\n    const ema12 = calculateEMA(prices, 12);\n    const ema26 = calculateEMA(prices, 26);\n    const macdLine = ema12 - ema26;\n    return {\n        macdLine,\n        signal: macdLine * 0.9\n    }; // Simplified signal line\n}\nfunction calculateEMA(prices, period) {\n    if (prices.length < period) return prices[prices.length - 1] || 0;\n    const multiplier = 2 / (period + 1);\n    let ema = calculateSMA(prices.slice(0, period), period);\n    for(let i = period; i < prices.length; i++){\n        ema = (prices[i] - ema) * multiplier + ema;\n    }\n    return ema;\n}\nfunction calculateATR(prices, period = 14) {\n    if (prices.length < 2) return 0;\n    let atr = 0;\n    const count = Math.min(period, prices.length - 1);\n    for(let i = prices.length - count; i < prices.length; i++){\n        const trueRange = Math.abs(prices[i] - prices[i - 1]);\n        atr += trueRange;\n    }\n    return atr / count;\n}\n// Strategy implementations\nfunction executeMomentumSurge(pair, currentPrice, riskLevel) {\n    const prices = getPriceHistory(pair);\n    if (prices.length < 5) {\n        // Generate a test signal with medium-high confidence for early trading\n        console.log(`Momentum Surge: Generating test signal for ${pair}, confidence: 60`);\n        return {\n            action: Math.random() > 0.5 ? _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY : _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: 55 + Math.random() * 15,\n            reasoning: 'Early signal - building history'\n        };\n    }\n    if (prices.length < 15) {\n        // Generate signals with good confidence for demo\n        return {\n            action: Math.random() > 0.45 ? _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY : _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: 50 + Math.random() * 20,\n            reasoning: 'Building momentum'\n        };\n    }\n    const rsi = calculateRSI(prices);\n    const recentPrices = prices.slice(-5);\n    const priceChange = (currentPrice - recentPrices[0]) / recentPrices[0] * 100;\n    // Volume spike simulation (random with bias based on price movement)\n    const volumeSpike = Math.abs(priceChange) > 1.5 ? 1.3 + Math.random() * 0.7 : 0.7 + Math.random() * 0.6;\n    // AGGRESSIVE RSI: Lower threshold for more signals\n    if (rsi < 35 && priceChange < 0 && volumeSpike > 1.0) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: Math.min(60 + riskLevel * 0.4, 90),\n            reasoning: 'Momentum dip, buying opportunity',\n            indicators: {\n                rsi,\n                priceChange,\n                volumeSpike\n            }\n        };\n    }\n    if (rsi > 65 && priceChange > 0.5 && volumeSpike > 1.0) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: Math.min(55 + riskLevel * 0.4, 85),\n            reasoning: 'Momentum peak, taking profits',\n            indicators: {\n                rsi,\n                priceChange,\n                volumeSpike\n            }\n        };\n    }\n    // Additional opportunity signals for demo\n    if (rsi > 50 && rsi < 60 && volumeSpike > 1.2) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: 50 + Math.random() * 10,\n            reasoning: 'Volume spike detected',\n            indicators: {\n                rsi,\n                priceChange,\n                volumeSpike\n            }\n        };\n    }\n    return {\n        action: 'HOLD',\n        confidence: 20 + Math.random() * 15,\n        reasoning: 'Waiting for momentum',\n        indicators: {\n            rsi,\n            priceChange\n        }\n    };\n}\nfunction executeVolatilityHarvest(pair, currentPrice, riskLevel) {\n    const prices = getPriceHistory(pair);\n    if (prices.length < 5) {\n        // Generate a test signal with low confidence for testing\n        return {\n            action: Math.random() > 0.5 ? _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY : _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: 45,\n            reasoning: 'Test signal - insufficient history'\n        };\n    }\n    if (prices.length < 10) {\n        // Generate signals with medium confidence\n        return {\n            action: Math.random() > 0.5 ? _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY : _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: 55,\n            reasoning: 'Test signal - building history'\n        };\n    }\n    const bb = calculateBollingerBands(prices);\n    const atr = calculateATR(prices);\n    const avgPrice = calculateSMA(prices, 20);\n    const volatility = atr / avgPrice * 100;\n    if (currentPrice <= bb.lower && volatility > 2) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: Math.min(75 + riskLevel * 0.2, 95),\n            reasoning: 'Price at lower Bollinger Band in high volatility',\n            indicators: {\n                currentPrice,\n                lowerBand: bb.lower,\n                volatility\n            }\n        };\n    }\n    if (currentPrice >= bb.upper && volatility > 2) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: Math.min(70 + riskLevel * 0.2, 95),\n            reasoning: 'Price at upper Bollinger Band in high volatility',\n            indicators: {\n                currentPrice,\n                upperBand: bb.upper,\n                volatility\n            }\n        };\n    }\n    return {\n        action: 'HOLD',\n        confidence: 35,\n        reasoning: 'Price within normal range',\n        indicators: {\n            volatility\n        }\n    };\n}\nfunction executeTrendReversalPro(pair, currentPrice, riskLevel) {\n    const prices = getPriceHistory(pair);\n    if (prices.length < 26) {\n        return {\n            action: 'HOLD',\n            confidence: 0,\n            reasoning: 'Insufficient price history'\n        };\n    }\n    const macd = calculateMACD(prices);\n    const sma20 = calculateSMA(prices, 20);\n    const sma50 = calculateSMA(prices, 50);\n    // Bullish reversal: MACD crosses above signal, price above SMA20\n    if (macd.macdLine > macd.signal && macd.macdLine > 0 && currentPrice > sma20 && sma20 > sma50) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: Math.min(80 + riskLevel * 0.2, 95),\n            reasoning: 'Bullish reversal detected with MACD crossover',\n            indicators: {\n                macd: macd.macdLine,\n                signal: macd.signal\n            }\n        };\n    }\n    // Bearish reversal: MACD crosses below signal\n    if (macd.macdLine < macd.signal && macd.macdLine < 0 && currentPrice < sma20) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: Math.min(75 + riskLevel * 0.2, 95),\n            reasoning: 'Bearish reversal detected with MACD crossover',\n            indicators: {\n                macd: macd.macdLine,\n                signal: macd.signal\n            }\n        };\n    }\n    return {\n        action: 'HOLD',\n        confidence: 40,\n        reasoning: 'No reversal signal',\n        indicators: {\n            macd: macd.macdLine\n        }\n    };\n}\nfunction executeSmartEntryPoints(pair, currentPrice, riskLevel) {\n    const prices = getPriceHistory(pair);\n    if (prices.length < 50) {\n        return {\n            action: 'HOLD',\n            confidence: 0,\n            reasoning: 'Insufficient price history'\n        };\n    }\n    // Multi-indicator confluence\n    const rsi = calculateRSI(prices);\n    const bb = calculateBollingerBands(prices);\n    const macd = calculateMACD(prices);\n    const sma20 = calculateSMA(prices, 20);\n    let buySignals = 0;\n    let sellSignals = 0;\n    if (rsi < 35) buySignals++;\n    if (rsi > 65) sellSignals++;\n    if (currentPrice < bb.lower) buySignals++;\n    if (currentPrice > bb.upper) sellSignals++;\n    if (macd.macdLine > macd.signal) buySignals++;\n    if (macd.macdLine < macd.signal) sellSignals++;\n    if (currentPrice > sma20) buySignals++;\n    if (currentPrice < sma20) sellSignals++;\n    if (buySignals >= 3) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: Math.min(70 + buySignals * 5 + riskLevel * 0.2, 98),\n            reasoning: `Strong buy confluence: ${buySignals}/4 indicators`,\n            indicators: {\n                rsi,\n                buySignals\n            }\n        };\n    }\n    if (sellSignals >= 3) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: Math.min(70 + sellSignals * 5 + riskLevel * 0.2, 98),\n            reasoning: `Strong sell confluence: ${sellSignals}/4 indicators`,\n            indicators: {\n                rsi,\n                sellSignals\n            }\n        };\n    }\n    return {\n        action: 'HOLD',\n        confidence: 45,\n        reasoning: 'No confluence signal',\n        indicators: {\n            buySignals,\n            sellSignals\n        }\n    };\n}\nfunction executeMultiTimeframeSync(pair, currentPrice, riskLevel) {\n    const prices = getPriceHistory(pair);\n    if (prices.length < 50) {\n        return {\n            action: 'HOLD',\n            confidence: 0,\n            reasoning: 'Insufficient price history'\n        };\n    }\n    // Simulate multiple timeframes\n    const sma10 = calculateSMA(prices, 10); // 1h equivalent\n    const sma20 = calculateSMA(prices, 20); // 4h equivalent\n    const sma50 = calculateSMA(prices, 50); // 1d equivalent\n    const trend1h = currentPrice > sma10;\n    const trend4h = currentPrice > sma20;\n    const trend1d = currentPrice > sma50;\n    // All timeframes bullish\n    if (trend1h && trend4h && trend1d) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: Math.min(85 + riskLevel * 0.15, 98),\n            reasoning: 'All timeframes aligned bullish',\n            indicators: {\n                sma10,\n                sma20,\n                sma50\n            }\n        };\n    }\n    // All timeframes bearish\n    if (!trend1h && !trend4h && !trend1d) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: Math.min(80 + riskLevel * 0.15, 98),\n            reasoning: 'All timeframes aligned bearish',\n            indicators: {\n                sma10,\n                sma20,\n                sma50\n            }\n        };\n    }\n    return {\n        action: 'HOLD',\n        confidence: 35,\n        reasoning: 'Timeframes not aligned',\n        indicators: {\n            sma10,\n            sma20,\n            sma50\n        }\n    };\n}\nfunction executeLiquidityFlow(pair, currentPrice, riskLevel) {\n    const prices = getPriceHistory(pair);\n    if (prices.length < 20) {\n        return {\n            action: 'HOLD',\n            confidence: 0,\n            reasoning: 'Insufficient price history'\n        };\n    }\n    // Simulate whale activity and liquidity flow\n    const recentPrices = prices.slice(-10);\n    const avgVolatility = calculateATR(prices) / currentPrice;\n    // Sudden price moves with low volatility indicate whale activity\n    const priceChange = (currentPrice - recentPrices[0]) / recentPrices[0] * 100;\n    const whaleActivity = Math.abs(priceChange) > 1.5 && avgVolatility < 0.02;\n    // Simulate order book imbalance\n    const orderBookImbalance = (Math.random() - 0.5) * 2; // -1 to 1\n    if (whaleActivity && priceChange > 0 && orderBookImbalance > 0.3) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY,\n            confidence: Math.min(78 + riskLevel * 0.22, 96),\n            reasoning: 'Whale accumulation detected with liquidity influx',\n            indicators: {\n                priceChange,\n                orderBookImbalance\n            }\n        };\n    }\n    if (whaleActivity && priceChange < 0 && orderBookImbalance < -0.3) {\n        return {\n            action: _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL,\n            confidence: Math.min(73 + riskLevel * 0.22, 96),\n            reasoning: 'Whale distribution detected with liquidity outflow',\n            indicators: {\n                priceChange,\n                orderBookImbalance\n            }\n        };\n    }\n    return {\n        action: 'HOLD',\n        confidence: 38,\n        reasoning: 'No significant liquidity flow',\n        indicators: {\n            orderBookImbalance\n        }\n    };\n}\nfunction executeStrategy(strategy, pair, currentPrice, riskLevel) {\n    // Update price history\n    updatePriceHistory(pair, currentPrice);\n    switch(strategy){\n        case _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.MOMENTUM_SURGE:\n            return executeMomentumSurge(pair, currentPrice, riskLevel);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.VOLATILITY_HARVEST:\n            return executeVolatilityHarvest(pair, currentPrice, riskLevel);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.TREND_REVERSAL_PRO:\n            return executeTrendReversalPro(pair, currentPrice, riskLevel);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.SMART_ENTRY_POINTS:\n            return executeSmartEntryPoints(pair, currentPrice, riskLevel);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.MULTI_TIMEFRAME_SYNC:\n            return executeMultiTimeframeSync(pair, currentPrice, riskLevel);\n        case _types__WEBPACK_IMPORTED_MODULE_0__.StrategyType.LIQUIDITY_FLOW:\n            return executeLiquidityFlow(pair, currentPrice, riskLevel);\n        default:\n            return {\n                action: 'HOLD',\n                confidence: 0,\n                reasoning: 'Unknown strategy'\n            };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/povStrategies.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/priceFeeds.ts":
/*!*******************************!*\
  !*** ./src/lib/priceFeeds.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCoinGeckoPrices: () => (/* binding */ fetchCoinGeckoPrices),\n/* harmony export */   generateCandlestickData: () => (/* binding */ generateCandlestickData),\n/* harmony export */   generateRealisticPriceMovement: () => (/* binding */ generateRealisticPriceMovement),\n/* harmony export */   getAllPrices: () => (/* binding */ getAllPrices),\n/* harmony export */   getCachedPrice: () => (/* binding */ getCachedPrice),\n/* harmony export */   getMockPrices: () => (/* binding */ getMockPrices)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"(rsc)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types/index.ts\");\n/* harmony import */ var _constants_config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/constants/config */ \"(rsc)/./src/constants/config.ts\");\n\n\n\n// In-memory cache for prices\nlet priceCache = new Map();\nlet lastApiCall = 0;\nconst API_CALL_INTERVAL = 60000; // 60 seconds between API calls (free tier: 30 req/min)\nconst COINGECKO_API = \"https://api.coingecko.com/api/v3\" || 0;\nasync function fetchCoinGeckoPrices() {\n    const now = Date.now();\n    // Rate limiting: Only call API every 60 seconds\n    if (now - lastApiCall < API_CALL_INTERVAL) {\n        console.log('Rate limited: Using cached prices');\n        return getCachedPrices();\n    }\n    try {\n        const coinIds = _constants_config__WEBPACK_IMPORTED_MODULE_1__.TRADING_PAIRS.map((pair)=>pair.coinGeckoId).join(',');\n        console.log('Fetching fresh prices from CoinGecko...');\n        lastApiCall = now;\n        const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].get(`${COINGECKO_API}/simple/price`, {\n            params: {\n                ids: coinIds,\n                vs_currencies: 'usd',\n                include_24hr_change: true,\n                include_24hr_vol: true\n            },\n            timeout: 10000\n        });\n        const prices = _constants_config__WEBPACK_IMPORTED_MODULE_1__.TRADING_PAIRS.map((pair)=>{\n            const data = response.data[pair.coinGeckoId];\n            return {\n                pair: pair.value,\n                price: data.usd,\n                timestamp: new Date(),\n                change24h: data.usd_24h_change,\n                volume24h: data.usd_24h_vol\n            };\n        });\n        // Update cache\n        prices.forEach((priceData)=>{\n            priceCache.set(priceData.pair, {\n                data: priceData,\n                timestamp: Date.now()\n            });\n        });\n        console.log('✅ Fresh prices fetched successfully');\n        return prices;\n    } catch (error) {\n        console.error('Error fetching CoinGecko prices:', error);\n        // Return cached prices if available\n        const cachedPrices = getCachedPrices();\n        if (cachedPrices.length > 0) {\n            console.log('Returning cached prices due to API error');\n            return cachedPrices;\n        }\n        // Return mock prices as fallback\n        console.log('Using mock prices as fallback');\n        return getMockPrices();\n    }\n}\nfunction getCachedPrices() {\n    const now = Date.now();\n    const validPrices = [];\n    priceCache.forEach((cached, pair)=>{\n        if (now - cached.timestamp < _constants_config__WEBPACK_IMPORTED_MODULE_1__.PRICE_CACHE_DURATION) {\n            validPrices.push(cached.data);\n        }\n    });\n    return validPrices;\n}\nasync function getCachedPrice(pair) {\n    const cached = priceCache.get(pair);\n    if (cached && Date.now() - cached.timestamp < _constants_config__WEBPACK_IMPORTED_MODULE_1__.PRICE_CACHE_DURATION) {\n        return cached.data;\n    }\n    // Cache expired or doesn't exist, fetch new prices\n    await fetchCoinGeckoPrices();\n    const newCached = priceCache.get(pair);\n    return newCached ? newCached.data : null;\n}\nfunction getMockPrices() {\n    // Fallback mock prices for development/demo\n    const basePrices = {\n        [_types__WEBPACK_IMPORTED_MODULE_0__.TradingPair.SOL_USDC]: 150.0,\n        [_types__WEBPACK_IMPORTED_MODULE_0__.TradingPair.BTC_USDT]: 42000.0,\n        [_types__WEBPACK_IMPORTED_MODULE_0__.TradingPair.ETH_USDC]: 2500.0\n    };\n    return Object.entries(basePrices).map(([pair, basePrice])=>({\n            pair: pair,\n            price: basePrice + (Math.random() - 0.5) * basePrice * 0.02,\n            timestamp: new Date(),\n            change24h: (Math.random() - 0.5) * 10,\n            volume24h: Math.random() * 1000000000\n        }));\n}\nfunction generateRealisticPriceMovement(currentPrice, volatility = 0.001) {\n    // Generate realistic price movement using random walk with drift\n    const drift = (Math.random() - 0.48) * volatility; // Slight upward bias\n    const randomShock = (Math.random() - 0.5) * volatility * 2;\n    const priceChange = currentPrice * (drift + randomShock);\n    return Math.max(currentPrice + priceChange, currentPrice * 0.95); // Prevent huge drops\n}\nasync function getAllPrices() {\n    const prices = await fetchCoinGeckoPrices();\n    const priceMap = new Map();\n    prices.forEach((price)=>{\n        priceMap.set(price.pair, price);\n    });\n    return priceMap;\n}\n// Simulated candlestick data generation for charts\nfunction generateCandlestickData(basePrice, periods = 100, timeframe = '1h') {\n    const data = [];\n    let currentPrice = basePrice;\n    const timeframeMs = {\n        '1h': 3600000,\n        '4h': 14400000,\n        '1d': 86400000\n    };\n    const interval = timeframeMs[timeframe];\n    const now = Date.now();\n    for(let i = periods - 1; i >= 0; i--){\n        const open = currentPrice;\n        const volatility = 0.01;\n        const high = open * (1 + Math.random() * volatility);\n        const low = open * (1 - Math.random() * volatility);\n        const close = low + Math.random() * (high - low);\n        data.push({\n            timestamp: new Date(now - i * interval),\n            open,\n            high,\n            low,\n            close,\n            volume: Math.random() * 1000000\n        });\n        currentPrice = close;\n    }\n    return data;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/priceFeeds.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/tradingEngine.ts":
/*!**********************************!*\
  !*** ./src/lib/tradingEngine.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   evaluateAndExecuteStrategy: () => (/* binding */ evaluateAndExecuteStrategy),\n/* harmony export */   simulateTrade: () => (/* binding */ simulateTrade),\n/* harmony export */   updateOpenPositions: () => (/* binding */ updateOpenPositions)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/types */ \"(rsc)/./src/types/index.ts\");\n/* harmony import */ var _povStrategies__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./povStrategies */ \"(rsc)/./src/lib/povStrategies.ts\");\n/* harmony import */ var _calculations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./calculations */ \"(rsc)/./src/lib/calculations.ts\");\n/* harmony import */ var _constants_config__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/constants/config */ \"(rsc)/./src/constants/config.ts\");\n/* harmony import */ var _mongodb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mongodb */ \"(rsc)/./src/lib/mongodb.ts\");\n\n\n\n\n\nasync function simulateTrade(bot, signal, pair, currentPrice) {\n    console.log(`Simulating trade: ${signal.action} ${pair} at $${currentPrice}`);\n    console.log(`Bot capital: $${bot.availableCapital}, max position: ${bot.riskParams.maxPositionSize}%`);\n    if (signal.action === 'HOLD') return null;\n    // Simulate realistic win rate (65-80%)\n    const targetWinRate = _constants_config__WEBPACK_IMPORTED_MODULE_3__.WIN_RATE_RANGE.min + Math.random() * (_constants_config__WEBPACK_IMPORTED_MODULE_3__.WIN_RATE_RANGE.max - _constants_config__WEBPACK_IMPORTED_MODULE_3__.WIN_RATE_RANGE.min);\n    const shouldWin = Math.random() < targetWinRate;\n    // Calculate position size\n    const positionSize = (0,_calculations__WEBPACK_IMPORTED_MODULE_2__.calculatePositionSize)(bot.availableCapital, bot.riskParams.maxPositionSize, currentPrice, bot.riskParams.stopLoss);\n    console.log(`Calculated position size: ${positionSize}`);\n    if (positionSize === 0 || bot.availableCapital < currentPrice * positionSize) {\n        console.log(`Insufficient capital: positionSize=${positionSize}, required=${currentPrice * positionSize}`);\n        return null; // Not enough capital\n    }\n    // Apply slippage - better slippage for winning trades\n    const entryPrice = (0,_calculations__WEBPACK_IMPORTED_MODULE_2__.applySlippage)(currentPrice, shouldWin ? _constants_config__WEBPACK_IMPORTED_MODULE_3__.SLIPPAGE_RANGE.min : _constants_config__WEBPACK_IMPORTED_MODULE_3__.SLIPPAGE_RANGE.min * 0.8, shouldWin ? _constants_config__WEBPACK_IMPORTED_MODULE_3__.SLIPPAGE_RANGE.max : _constants_config__WEBPACK_IMPORTED_MODULE_3__.SLIPPAGE_RANGE.max * 1.8);\n    const quantity = Math.floor(positionSize * 100) / 100;\n    if (quantity <= 0) return null;\n    const slippage = Math.abs(entryPrice - currentPrice) / currentPrice;\n    const trade = {\n        userId: bot.userId,\n        botId: bot._id.toString(),\n        pair,\n        type: signal.action,\n        quantity,\n        entryPrice,\n        currentPrice,\n        strategy: bot.strategy,\n        isOpen: true,\n        entryTimestamp: new Date(),\n        slippage\n    };\n    console.log(`Trade created successfully: ${trade.type} ${trade.pair} quantity=${trade.quantity} at $${trade.entryPrice}`);\n    return trade;\n}\nasync function updateOpenPositions(bot, currentPrices) {\n    const tradesCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.TRADES);\n    // Get all open trades for this bot\n    const openTrades = await tradesCollection.find({\n        botId: bot._id.toString(),\n        isOpen: true\n    }).toArray();\n    for (const trade of openTrades){\n        const currentPrice = currentPrices.get(trade.pair);\n        if (!currentPrice) continue;\n        const { pnl, pnlPercentage } = (0,_calculations__WEBPACK_IMPORTED_MODULE_2__.calculatePnL)(trade.entryPrice, currentPrice, trade.quantity, trade.type);\n        // Check for stop loss\n        const hitStopLoss = (0,_calculations__WEBPACK_IMPORTED_MODULE_2__.shouldTriggerStopLoss)(trade.entryPrice, currentPrice, bot.riskParams.stopLoss, trade.type);\n        // Check for take profit\n        const hitTakeProfit = (0,_calculations__WEBPACK_IMPORTED_MODULE_2__.shouldTriggerTakeProfit)(trade.entryPrice, currentPrice, bot.riskParams.takeProfit, trade.type);\n        if (hitStopLoss || hitTakeProfit) {\n            // Close the trade\n            await tradesCollection.updateOne({\n                _id: trade._id\n            }, {\n                $set: {\n                    isOpen: false,\n                    exitPrice: currentPrice,\n                    exitTimestamp: new Date(),\n                    pnl,\n                    pnlPercentage\n                }\n            });\n            // Update bot's available capital (return invested capital + PnL)\n            const botsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.BOTS);\n            await botsCollection.updateOne({\n                _id: bot._id\n            }, {\n                $inc: {\n                    availableCapital: trade.entryPrice * trade.quantity + pnl\n                }\n            });\n            // Log the closure\n            const logsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.LOGS);\n            await logsCollection.insertOne({\n                userId: bot.userId,\n                botId: bot._id.toString(),\n                type: hitStopLoss ? 'ERROR' : 'INFO',\n                message: `Trade closed: ${trade.pair} ${trade.type} - ${hitStopLoss ? 'Stop Loss' : 'Take Profit'} hit (P&L: $${pnl.toFixed(2)})`,\n                metadata: {\n                    trade,\n                    reason: hitStopLoss ? 'STOP_LOSS' : 'TAKE_PROFIT'\n                },\n                timestamp: new Date()\n            });\n        } else {\n            // Just update current price and P&L\n            await tradesCollection.updateOne({\n                _id: trade._id\n            }, {\n                $set: {\n                    currentPrice,\n                    pnl,\n                    pnlPercentage\n                }\n            });\n        }\n    }\n}\nasync function evaluateAndExecuteStrategy(bot, currentPrices) {\n    const newTrades = [];\n    // Update price history for all trading pairs\n    for (const [pair, price] of currentPrices){\n        (0,_povStrategies__WEBPACK_IMPORTED_MODULE_1__.updatePriceHistory)(pair, price);\n    }\n    // Check each trading pair - ALLOW MULTIPLE TRADES PER PAIR\n    for (const pair of bot.tradingPairs){\n        const currentPrice = currentPrices.get(pair);\n        if (!currentPrice) continue;\n        // Execute strategy to get signal\n        const signal = (0,_povStrategies__WEBPACK_IMPORTED_MODULE_1__.executeStrategy)(bot.strategy, pair, currentPrice, bot.riskParams.riskLevel);\n        console.log(`Strategy ${bot.strategy} for ${pair}: action=${signal.action}, confidence=${signal.confidence}, reasoning=${signal.reasoning}`);\n        // Only execute on strong signals - LOWERED THRESHOLD FOR MORE TRADING IN DEMO MODE\n        const confidenceThreshold = 25 + (100 - bot.riskParams.riskLevel) * 0.05;\n        if (signal.confidence < confidenceThreshold) {\n            console.log(`Signal confidence ${signal.confidence} below threshold ${confidenceThreshold}, skipping`);\n            continue;\n        }\n        const tradesCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.TRADES);\n        console.log(`Trading conditions met: signal.action=${signal.action}`);\n        // Execute BUY signals - REMOVED THE SINGLE-POSITION CHECK\n        if (signal.action === _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.BUY) {\n            console.log(`Conditions met for BUY trade, simulating...`);\n            const trade = await simulateTrade(bot, signal, pair, currentPrice);\n            console.log(`Trade simulation result:`, trade ? 'SUCCESS' : 'FAILED');\n            if (trade) {\n                // Save trade to database\n                const result = await tradesCollection.insertOne(trade);\n                trade._id = result.insertedId;\n                // Update bot's available capital\n                const botsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.BOTS);\n                await botsCollection.updateOne({\n                    _id: bot._id\n                }, {\n                    $inc: {\n                        availableCapital: -(trade.entryPrice * trade.quantity)\n                    }\n                });\n                // Log the trade\n                const logsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.LOGS);\n                await logsCollection.insertOne({\n                    userId: bot.userId,\n                    botId: bot._id.toString(),\n                    type: 'TRADE_EXECUTED',\n                    message: `${signal.action} signal: ${pair} @ $${currentPrice.toFixed(2)} (${signal.reasoning})`,\n                    metadata: {\n                        trade,\n                        signal\n                    },\n                    timestamp: new Date()\n                });\n                newTrades.push(trade);\n            }\n        } else if (signal.action === _types__WEBPACK_IMPORTED_MODULE_0__.TradeType.SELL) {\n            // For SELL signals, close the oldest open position for this pair\n            const existingPosition = await tradesCollection.findOne({\n                botId: bot._id.toString(),\n                pair,\n                isOpen: true\n            });\n            if (existingPosition) {\n                const exitPrice = currentPrice;\n                const { pnl, pnlPercentage } = (0,_calculations__WEBPACK_IMPORTED_MODULE_2__.calculatePnL)(existingPosition.entryPrice, exitPrice, existingPosition.quantity, existingPosition.type);\n                await tradesCollection.updateOne({\n                    _id: existingPosition._id\n                }, {\n                    $set: {\n                        isOpen: false,\n                        exitPrice,\n                        exitTimestamp: new Date(),\n                        pnl,\n                        pnlPercentage\n                    }\n                });\n                // Update bot's available capital\n                const botsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.BOTS);\n                await botsCollection.updateOne({\n                    _id: bot._id\n                }, {\n                    $inc: {\n                        availableCapital: existingPosition.entryPrice * existingPosition.quantity + pnl\n                    }\n                });\n                // Log the closure\n                const logsCollection = await (0,_mongodb__WEBPACK_IMPORTED_MODULE_4__.getCollection)(_mongodb__WEBPACK_IMPORTED_MODULE_4__.COLLECTIONS.LOGS);\n                await logsCollection.insertOne({\n                    userId: bot.userId,\n                    botId: bot._id.toString(),\n                    type: 'TRADE_EXECUTED',\n                    message: `Position closed: ${pair} ${existingPosition.type} - Strategy signal (P&L: $${pnl.toFixed(2)})`,\n                    metadata: {\n                        trade: existingPosition,\n                        signal\n                    },\n                    timestamp: new Date()\n                });\n            }\n        }\n    }\n    return newTrades;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/tradingEngine.ts\n");

/***/ }),

/***/ "(rsc)/./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BotStatus: () => (/* binding */ BotStatus),\n/* harmony export */   LogType: () => (/* binding */ LogType),\n/* harmony export */   StrategyType: () => (/* binding */ StrategyType),\n/* harmony export */   TradeType: () => (/* binding */ TradeType),\n/* harmony export */   TradingPair: () => (/* binding */ TradingPair)\n/* harmony export */ });\nvar TradeType = /*#__PURE__*/ function(TradeType) {\n    TradeType[\"BUY\"] = \"BUY\";\n    TradeType[\"SELL\"] = \"SELL\";\n    return TradeType;\n}({});\nvar BotStatus = /*#__PURE__*/ function(BotStatus) {\n    BotStatus[\"ACTIVE\"] = \"ACTIVE\";\n    BotStatus[\"INACTIVE\"] = \"INACTIVE\";\n    BotStatus[\"PAUSED\"] = \"PAUSED\";\n    return BotStatus;\n}({});\nvar StrategyType = /*#__PURE__*/ function(StrategyType) {\n    StrategyType[\"MOMENTUM_SURGE\"] = \"MOMENTUM_SURGE\";\n    StrategyType[\"VOLATILITY_HARVEST\"] = \"VOLATILITY_HARVEST\";\n    StrategyType[\"TREND_REVERSAL_PRO\"] = \"TREND_REVERSAL_PRO\";\n    StrategyType[\"SMART_ENTRY_POINTS\"] = \"SMART_ENTRY_POINTS\";\n    StrategyType[\"MULTI_TIMEFRAME_SYNC\"] = \"MULTI_TIMEFRAME_SYNC\";\n    StrategyType[\"LIQUIDITY_FLOW\"] = \"LIQUIDITY_FLOW\";\n    StrategyType[\"CUSTOM\"] = \"CUSTOM\";\n    return StrategyType;\n}({});\nvar LogType = /*#__PURE__*/ function(LogType) {\n    LogType[\"BOT_START\"] = \"BOT_START\";\n    LogType[\"BOT_STOP\"] = \"BOT_STOP\";\n    LogType[\"BOT_PAUSE\"] = \"BOT_PAUSE\";\n    LogType[\"TRADE_EXECUTED\"] = \"TRADE_EXECUTED\";\n    LogType[\"STRATEGY_SIGNAL\"] = \"STRATEGY_SIGNAL\";\n    LogType[\"ERROR\"] = \"ERROR\";\n    LogType[\"INFO\"] = \"INFO\";\n    return LogType;\n}({});\nvar TradingPair = /*#__PURE__*/ function(TradingPair) {\n    TradingPair[\"SOL_USDC\"] = \"SOL/USDC\";\n    TradingPair[\"BTC_USDT\"] = \"BTC/USDT\";\n    TradingPair[\"ETH_USDC\"] = \"ETH/USDC\";\n    return TradingPair;\n}({});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvdHlwZXMvaW5kZXgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFFTyx1Q0FBS0E7OztXQUFBQTtNQUdYO0FBRU0sdUNBQUtDOzs7O1dBQUFBO01BSVg7QUFFTSwwQ0FBS0M7Ozs7Ozs7O1dBQUFBO01BUVg7QUFFTSxxQ0FBS0M7Ozs7Ozs7O1dBQUFBO01BUVg7QUFFTSx5Q0FBS0M7Ozs7V0FBQUE7TUFJWCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxKUFxccHBwcHBwcHBwcHBwcHBwcHBcXHBvdlxcY3J5cHRvLXRyYWRpbmctYm90XFxzcmNcXHR5cGVzXFxpbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYmplY3RJZCB9IGZyb20gJ21vbmdvZGInO1xyXG5cclxuZXhwb3J0IGVudW0gVHJhZGVUeXBlIHtcclxuICBCVVkgPSAnQlVZJyxcclxuICBTRUxMID0gJ1NFTEwnLFxyXG59XHJcblxyXG5leHBvcnQgZW51bSBCb3RTdGF0dXMge1xyXG4gIEFDVElWRSA9ICdBQ1RJVkUnLFxyXG4gIElOQUNUSVZFID0gJ0lOQUNUSVZFJyxcclxuICBQQVVTRUQgPSAnUEFVU0VEJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gU3RyYXRlZ3lUeXBlIHtcclxuICBNT01FTlRVTV9TVVJHRSA9ICdNT01FTlRVTV9TVVJHRScsXHJcbiAgVk9MQVRJTElUWV9IQVJWRVNUID0gJ1ZPTEFUSUxJVFlfSEFSVkVTVCcsXHJcbiAgVFJFTkRfUkVWRVJTQUxfUFJPID0gJ1RSRU5EX1JFVkVSU0FMX1BSTycsXHJcbiAgU01BUlRfRU5UUllfUE9JTlRTID0gJ1NNQVJUX0VOVFJZX1BPSU5UUycsXHJcbiAgTVVMVElfVElNRUZSQU1FX1NZTkMgPSAnTVVMVElfVElNRUZSQU1FX1NZTkMnLFxyXG4gIExJUVVJRElUWV9GTE9XID0gJ0xJUVVJRElUWV9GTE9XJyxcclxuICBDVVNUT00gPSAnQ1VTVE9NJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gTG9nVHlwZSB7XHJcbiAgQk9UX1NUQVJUID0gJ0JPVF9TVEFSVCcsXHJcbiAgQk9UX1NUT1AgPSAnQk9UX1NUT1AnLFxyXG4gIEJPVF9QQVVTRSA9ICdCT1RfUEFVU0UnLFxyXG4gIFRSQURFX0VYRUNVVEVEID0gJ1RSQURFX0VYRUNVVEVEJyxcclxuICBTVFJBVEVHWV9TSUdOQUwgPSAnU1RSQVRFR1lfU0lHTkFMJyxcclxuICBFUlJPUiA9ICdFUlJPUicsXHJcbiAgSU5GTyA9ICdJTkZPJyxcclxufVxyXG5cclxuZXhwb3J0IGVudW0gVHJhZGluZ1BhaXIge1xyXG4gIFNPTF9VU0RDID0gJ1NPTC9VU0RDJyxcclxuICBCVENfVVNEVCA9ICdCVEMvVVNEVCcsXHJcbiAgRVRIX1VTREMgPSAnRVRIL1VTREMnLFxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIge1xyXG4gIF9pZD86IE9iamVjdElkO1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbiAgcGFzc3dvcmRIYXNoOiBzdHJpbmc7XHJcbiAgY3JlYXRlZEF0OiBEYXRlO1xyXG4gIHVwZGF0ZWRBdD86IERhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQm90IHtcclxuICBfaWQ/OiBPYmplY3RJZDtcclxuICB1c2VySWQ6IHN0cmluZztcclxuICBzdGF0dXM6IEJvdFN0YXR1cztcclxuICBzdHJhdGVneTogU3RyYXRlZ3lUeXBlO1xyXG4gIGNhcGl0YWw6IG51bWJlcjtcclxuICBhdmFpbGFibGVDYXBpdGFsOiBudW1iZXI7XHJcbiAgcmlza1BhcmFtczoge1xyXG4gICAgc3RvcExvc3M6IG51bWJlcjsgLy8gcGVyY2VudGFnZVxyXG4gICAgdGFrZVByb2ZpdDogbnVtYmVyOyAvLyBwZXJjZW50YWdlXHJcbiAgICBtYXhQb3NpdGlvblNpemU6IG51bWJlcjsgLy8gcGVyY2VudGFnZSBvZiBjYXBpdGFsXHJcbiAgICByaXNrTGV2ZWw6IG51bWJlcjsgLy8gMS0xMDBcclxuICB9O1xyXG4gIHRyYWRpbmdQYWlyczogVHJhZGluZ1BhaXJbXTtcclxuICBzaW11bGF0aW9uU3BlZWQ6IG51bWJlcjsgLy8gMXgsIDEweCwgNTB4LCAxMDB4XHJcbiAgY3JlYXRlZEF0OiBEYXRlO1xyXG4gIHVwZGF0ZWRBdD86IERhdGU7XHJcbiAgbGFzdFRpY2tBdD86IERhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHJhZGUge1xyXG4gIF9pZD86IE9iamVjdElkO1xyXG4gIHVzZXJJZDogc3RyaW5nO1xyXG4gIGJvdElkOiBzdHJpbmc7XHJcbiAgcGFpcjogVHJhZGluZ1BhaXI7XHJcbiAgdHlwZTogVHJhZGVUeXBlO1xyXG4gIHF1YW50aXR5OiBudW1iZXI7XHJcbiAgZW50cnlQcmljZTogbnVtYmVyO1xyXG4gIGV4aXRQcmljZT86IG51bWJlcjtcclxuICBjdXJyZW50UHJpY2U/OiBudW1iZXI7XHJcbiAgcG5sPzogbnVtYmVyO1xyXG4gIHBubFBlcmNlbnRhZ2U/OiBudW1iZXI7XHJcbiAgc3RyYXRlZ3k6IFN0cmF0ZWd5VHlwZTtcclxuICBpc09wZW46IGJvb2xlYW47XHJcbiAgZW50cnlUaW1lc3RhbXA6IERhdGU7XHJcbiAgZXhpdFRpbWVzdGFtcD86IERhdGU7XHJcbiAgc2xpcHBhZ2U6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTdHJhdGVneSB7XHJcbiAgX2lkPzogT2JqZWN0SWQ7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHR5cGU6IFN0cmF0ZWd5VHlwZTtcclxuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xyXG4gIHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsIGFueT47XHJcbiAgdXNlcklkPzogc3RyaW5nO1xyXG4gIGlzQ3VzdG9tOiBib29sZWFuO1xyXG4gIGNyZWF0ZWRBdDogRGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTZXR0aW5ncyB7XHJcbiAgX2lkPzogT2JqZWN0SWQ7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgYXBpS2V5cz86IHtcclxuICAgIGV4Y2hhbmdlPzogc3RyaW5nO1xyXG4gICAga2V5Pzogc3RyaW5nO1xyXG4gICAgc2VjcmV0Pzogc3RyaW5nO1xyXG4gIH07XHJcbiAgcmlza01hbmFnZW1lbnQ6IHtcclxuICAgIHN0b3BMb3NzOiBudW1iZXI7XHJcbiAgICB0YWtlUHJvZml0OiBudW1iZXI7XHJcbiAgICBtYXhEcmF3ZG93bjogbnVtYmVyO1xyXG4gIH07XHJcbiAgbm90aWZpY2F0aW9uczoge1xyXG4gICAgZW1haWw6IGJvb2xlYW47XHJcbiAgICB0cmFkaW5nQWxlcnRzOiBib29sZWFuO1xyXG4gICAgcGVyZm9ybWFuY2VSZXBvcnRzOiBib29sZWFuO1xyXG4gIH07XHJcbiAgYm90QmVoYXZpb3I6ICdhZ2dyZXNzaXZlJyB8ICdjb25zZXJ2YXRpdmUnIHwgJ21vZGVyYXRlJztcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgdXBkYXRlZEF0PzogRGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBMb2cge1xyXG4gIF9pZD86IE9iamVjdElkO1xyXG4gIHVzZXJJZDogc3RyaW5nO1xyXG4gIGJvdElkPzogc3RyaW5nO1xyXG4gIHR5cGU6IExvZ1R5cGU7XHJcbiAgbWVzc2FnZTogc3RyaW5nO1xyXG4gIG1ldGFkYXRhPzogUmVjb3JkPHN0cmluZywgYW55PjtcclxuICB0aW1lc3RhbXA6IERhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUHJpY2VEYXRhIHtcclxuICBwYWlyOiBUcmFkaW5nUGFpcjtcclxuICBwcmljZTogbnVtYmVyO1xyXG4gIHRpbWVzdGFtcDogRGF0ZTtcclxuICBjaGFuZ2UyNGg/OiBudW1iZXI7XHJcbiAgdm9sdW1lMjRoPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFBlcmZvcm1hbmNlTWV0cmljcyB7XHJcbiAgcm9pOiBudW1iZXI7XHJcbiAgd2luUmF0ZTogbnVtYmVyO1xyXG4gIHRvdGFsUHJvZml0OiBudW1iZXI7XHJcbiAgdG90YWxMb3NzOiBudW1iZXI7XHJcbiAgbmV0UHJvZml0OiBudW1iZXI7XHJcbiAgZHJhd2Rvd246IG51bWJlcjtcclxuICBzaGFycGVSYXRpbzogbnVtYmVyO1xyXG4gIHRvdGFsVHJhZGVzOiBudW1iZXI7XHJcbiAgd2lubmluZ1RyYWRlczogbnVtYmVyO1xyXG4gIGxvc2luZ1RyYWRlczogbnVtYmVyO1xyXG4gIGF2ZXJhZ2VXaW46IG51bWJlcjtcclxuICBhdmVyYWdlTG9zczogbnVtYmVyO1xyXG4gIHByb2ZpdEZhY3RvcjogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhbmRsZXN0aWNrRGF0YSB7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG4gIG9wZW46IG51bWJlcjtcclxuICBoaWdoOiBudW1iZXI7XHJcbiAgbG93OiBudW1iZXI7XHJcbiAgY2xvc2U6IG51bWJlcjtcclxuICB2b2x1bWU6IG51bWJlcjtcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiVHJhZGVUeXBlIiwiQm90U3RhdHVzIiwiU3RyYXRlZ3lUeXBlIiwiTG9nVHlwZSIsIlRyYWRpbmdQYWlyIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/types/index.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/action-async-storage.external":
/*!*******************************************************************************!*\
  !*** external "next/dist/server/app-render/action-async-storage.external.js" ***!
  \*******************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/action-async-storage.external.js");

/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "./work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "next/dist/shared/lib/no-fallback-error.external":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/no-fallback-error.external" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/no-fallback-error.external");

/***/ }),

/***/ "next/dist/shared/lib/router/utils/app-paths":
/*!**************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/app-paths" ***!
  \**************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/app-paths");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tty":
/*!**********************!*\
  !*** external "tty" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tty");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/ms","vendor-chunks/axios","vendor-chunks/asynckit","vendor-chunks/math-intrinsics","vendor-chunks/es-errors","vendor-chunks/call-bind-apply-helpers","vendor-chunks/debug","vendor-chunks/get-proto","vendor-chunks/mime-db","vendor-chunks/has-symbols","vendor-chunks/gopd","vendor-chunks/function-bind","vendor-chunks/form-data","vendor-chunks/follow-redirects","vendor-chunks/supports-color","vendor-chunks/proxy-from-env","vendor-chunks/mime-types","vendor-chunks/hasown","vendor-chunks/has-tostringtag","vendor-chunks/has-flag","vendor-chunks/get-intrinsic","vendor-chunks/es-set-tostringtag","vendor-chunks/es-object-atoms","vendor-chunks/es-define-property","vendor-chunks/dunder-proto","vendor-chunks/delayed-stream","vendor-chunks/combined-stream"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Fbot%2Ftick%2Froute&page=%2Fapi%2Fbot%2Ftick%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fbot%2Ftick%2Froute.ts&appDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CJP%5Cppppppppppppppppp%5Cpov%5Ccrypto-trading-bot&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D&isGlobalNotFoundEnabled=!")));
module.exports = __webpack_exports__;

})();